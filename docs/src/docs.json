{
  "docs": [
    {
      "comment": "/**\n * @typedef marker-box\n * @property {string} type - \"box\"\n * @property {data-ref} data - Box data\n * @property {marker-box-settings} settings - Box marker settings\n * @example\n * {\n *   type: \"box\",\n *   data: { source: \"/qDimensionInfo/0\" },\n *  settings: {\n *    x: { source: \"/qDimensionInfo/0\" },\n *    y: { source: [\"/qMeasureInfo/0\",\n *                  \"/qMeasureInfo/1\",\n *                  \"/qMeasureInfo/2\",\n *                  \"/qMeasureInfo/3\",\n *                  \"/qMeasureInfo/4\"] },\n *    min: { source: \"/qMeasureInfo/0\" },\n *    max: { source: \"/qMeasureInfo/1\" },\n *    start: { source: \"/qMeasureInfo/2\" },\n *    end: { source: \"/qMeasureInfo/3\" },\n *    med: { source: \"/qMeasureInfo/4\" }\n *  }\n * }\n */",
      "meta": {
        "range": [
          482,
          1210
        ],
        "filename": "box.js",
        "lineno": 33,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/chart-components/markers",
        "code": {}
      },
      "kind": "typedef",
      "name": "marker-box",
      "properties": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "\"box\"",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "data-ref"
            ]
          },
          "description": "Box data",
          "name": "data"
        },
        {
          "type": {
            "names": [
              "marker-box-settings"
            ]
          },
          "description": "Box marker settings",
          "name": "settings"
        }
      ],
      "examples": [
        "{\n  type: \"box\",\n  data: { source: \"/qDimensionInfo/0\" },\n settings: {\n   x: { source: \"/qDimensionInfo/0\" },\n   y: { source: [\"/qMeasureInfo/0\",\n                 \"/qMeasureInfo/1\",\n                 \"/qMeasureInfo/2\",\n                 \"/qMeasureInfo/3\",\n                 \"/qMeasureInfo/4\"] },\n   min: { source: \"/qMeasureInfo/0\" },\n   max: { source: \"/qMeasureInfo/1\" },\n   start: { source: \"/qMeasureInfo/2\" },\n   end: { source: \"/qMeasureInfo/3\" },\n   med: { source: \"/qMeasureInfo/4\" }\n }\n}"
      ],
      "longname": "marker-box",
      "scope": "global",
      "___id": "T000002R000501",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef marker-box-settings\n * @property {marker-box-data} min - min\n * @property {marker-box-data} max - max\n * @property {marker-box-data} start - start\n * @property {marker-box-data} end - end\n * @property {marker-box-data} med - med\n */",
      "meta": {
        "range": [
          1212,
          1460
        ],
        "filename": "box.js",
        "lineno": 58,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/chart-components/markers",
        "code": {}
      },
      "kind": "typedef",
      "name": "marker-box-settings",
      "properties": [
        {
          "type": {
            "names": [
              "marker-box-data"
            ]
          },
          "description": "min",
          "name": "min"
        },
        {
          "type": {
            "names": [
              "marker-box-data"
            ]
          },
          "description": "max",
          "name": "max"
        },
        {
          "type": {
            "names": [
              "marker-box-data"
            ]
          },
          "description": "start",
          "name": "start"
        },
        {
          "type": {
            "names": [
              "marker-box-data"
            ]
          },
          "description": "end",
          "name": "end"
        },
        {
          "type": {
            "names": [
              "marker-box-data"
            ]
          },
          "description": "med",
          "name": "med"
        }
      ],
      "longname": "marker-box-settings",
      "scope": "global",
      "___id": "T000002R000502",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef marker-box-data\n */",
      "meta": {
        "range": [
          1462,
          1497
        ],
        "filename": "box.js",
        "lineno": 67,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/chart-components/markers",
        "code": {}
      },
      "kind": "typedef",
      "name": "marker-box-data",
      "longname": "marker-box-data",
      "scope": "global",
      "___id": "T000002R000528",
      "___s": true
    },
    {
      "comment": "/**\n * Marker settings\n * @typedef {(marker-point|marker-box)} marker\n */",
      "meta": {
        "range": [
          194,
          267
        ],
        "filename": "index.js",
        "lineno": 10,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/chart-components/markers",
        "code": {}
      },
      "description": "Marker settings",
      "kind": "typedef",
      "name": "marker",
      "type": {
        "names": [
          "marker-point",
          "marker-box"
        ]
      },
      "longname": "marker",
      "scope": "global",
      "___id": "T000002R000662",
      "___s": true
    },
    {
      "comment": "/**\n * Data reference object\n * @typedef {object} data-ref\n * @property {string} source - Data field\n * @example\n * {\n *   source: \"/qDimensionInfo/0\"\n * }\n */",
      "meta": {
        "range": [
          269,
          428
        ],
        "filename": "index.js",
        "lineno": 15,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/chart-components/markers",
        "code": {}
      },
      "description": "Data reference object",
      "kind": "typedef",
      "name": "data-ref",
      "type": {
        "names": [
          "object"
        ]
      },
      "properties": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Data field",
          "name": "source"
        }
      ],
      "examples": [
        "{\n  source: \"/qDimensionInfo/0\"\n}"
      ],
      "longname": "data-ref",
      "scope": "global",
      "___id": "T000002R000664",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef marker-point\n * @property {string} type - \"point\"\n * @property {data-ref} data - Point data.\n * @property {marker-point-settings} settings - Marker settings\n * @example\n * {\n *   type: \"point\",\n *   data: { source: \"/qDimensionInfo/0\" },\n *  settings: {\n *    x: 0.2, // simple number, places all points at the same position along the x-axis (which assumes to have a range of [0,1])\n *    y: ( d, i, arr ) => i / arr.length, // function is called for each datum `d`\n *    fill: { source: \"/qMeasureInfo/0\", type: \"color\" }, // auto-constructs a color scale from the specified source\n *    opacity: { source: \"/qMeasureInfo/1\", fn: ( d, i ) => d.value },\n *    shape: ( d, i ) => [\"rect\", \"circle\"][i % 2]\n *  }\n * }\n */",
      "meta": {
        "range": [
          394,
          1129
        ],
        "filename": "index.js",
        "lineno": 18,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/chart-components/markers/point",
        "code": {}
      },
      "kind": "typedef",
      "name": "marker-point",
      "properties": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "\"point\"",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "data-ref"
            ]
          },
          "description": "Point data.",
          "name": "data"
        },
        {
          "type": {
            "names": [
              "marker-point-settings"
            ]
          },
          "description": "Marker settings",
          "name": "settings"
        }
      ],
      "examples": [
        "{\n  type: \"point\",\n  data: { source: \"/qDimensionInfo/0\" },\n settings: {\n   x: 0.2, // simple number, places all points at the same position along the x-axis (which assumes to have a range of [0,1])\n   y: ( d, i, arr ) => i / arr.length, // function is called for each datum `d`\n   fill: { source: \"/qMeasureInfo/0\", type: \"color\" }, // auto-constructs a color scale from the specified source\n   opacity: { source: \"/qMeasureInfo/1\", fn: ( d, i ) => d.value },\n   shape: ( d, i ) => [\"rect\", \"circle\"][i % 2]\n }\n}"
      ],
      "longname": "marker-point",
      "scope": "global",
      "___id": "T000002R000668",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef marker-point-settings\n * @property {marker-point-number} [x=0.5] - x coordinate\n * @property {marker-point-number} [y=0.5] - y coordinate\n * @property {marker-point-string} [fill=\"#999\"] - fill color\n * @property {marker-point-string} [stroke=\"#ccc\"] - stroke color\n * @property {marker-point-number} [strokeWidth=0] - stroke width\n * @property {marker-point-number} [size=1] - size of shape\n * @property {marker-point-number} [opacity=1] - opacity of shape\n * @property {marker-point-string} [shape=\"circle\"] - type of shape\n */",
      "meta": {
        "range": [
          1131,
          1676
        ],
        "filename": "index.js",
        "lineno": 37,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/chart-components/markers/point",
        "code": {}
      },
      "kind": "typedef",
      "name": "marker-point-settings",
      "properties": [
        {
          "type": {
            "names": [
              "marker-point-number"
            ]
          },
          "optional": true,
          "defaultvalue": 0.5,
          "description": "x coordinate",
          "name": "x"
        },
        {
          "type": {
            "names": [
              "marker-point-number"
            ]
          },
          "optional": true,
          "defaultvalue": 0.5,
          "description": "y coordinate",
          "name": "y"
        },
        {
          "type": {
            "names": [
              "marker-point-string"
            ]
          },
          "optional": true,
          "defaultvalue": "\"#999\"",
          "description": "fill color",
          "name": "fill"
        },
        {
          "type": {
            "names": [
              "marker-point-string"
            ]
          },
          "optional": true,
          "defaultvalue": "\"#ccc\"",
          "description": "stroke color",
          "name": "stroke"
        },
        {
          "type": {
            "names": [
              "marker-point-number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "stroke width",
          "name": "strokeWidth"
        },
        {
          "type": {
            "names": [
              "marker-point-number"
            ]
          },
          "optional": true,
          "defaultvalue": 1,
          "description": "size of shape",
          "name": "size"
        },
        {
          "type": {
            "names": [
              "marker-point-number"
            ]
          },
          "optional": true,
          "defaultvalue": 1,
          "description": "opacity of shape",
          "name": "opacity"
        },
        {
          "type": {
            "names": [
              "marker-point-string"
            ]
          },
          "optional": true,
          "defaultvalue": "\"circle\"",
          "description": "type of shape",
          "name": "shape"
        }
      ],
      "longname": "marker-point-settings",
      "scope": "global",
      "___id": "T000002R000669",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef {(string|marker-point-data-accessor|marker-point-data)} marker-point-string\n */",
      "meta": {
        "range": [
          1678,
          1773
        ],
        "filename": "index.js",
        "lineno": 49,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/chart-components/markers/point",
        "code": {}
      },
      "kind": "typedef",
      "name": "marker-point-string",
      "type": {
        "names": [
          "string",
          "marker-point-data-accessor",
          "marker-point-data"
        ]
      },
      "longname": "marker-point-string",
      "scope": "global",
      "___id": "T000002R000670",
      "___s": true
    },
    {
      "comment": "/**\n  * @typedef {(number|marker-point-data-accessor|marker-point-data)} marker-point-number\n  */",
      "meta": {
        "range": [
          1776,
          1873
        ],
        "filename": "index.js",
        "lineno": 53,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/chart-components/markers/point",
        "code": {}
      },
      "kind": "typedef",
      "name": "marker-point-number",
      "type": {
        "names": [
          "number",
          "marker-point-data-accessor",
          "marker-point-data"
        ]
      },
      "longname": "marker-point-number",
      "scope": "global",
      "___id": "T000002R000671",
      "___s": true
    },
    {
      "comment": "/**\n  * @callback marker-point-data-accessor\n  * @param {object} datum - The datum object\n  * @param {string} datum.label - Label of datum\n  * @param {number} datum.value - Numeric value of datum\n  * @param {string|number} datum.id - Id of datum\n  * @param {integer} index - Index of datum in the data\n  * @param {datum[]} arr - Array of current data\n  */",
      "meta": {
        "range": [
          1876,
          2231
        ],
        "filename": "index.js",
        "lineno": 57,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/chart-components/markers/point",
        "code": {}
      },
      "kind": "typedef",
      "name": "marker-point-data-accessor",
      "type": {
        "names": [
          "function"
        ]
      },
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "The datum object",
          "name": "datum"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Label of datum",
          "name": "datum.label"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Numeric value of datum",
          "name": "datum.value"
        },
        {
          "type": {
            "names": [
              "string",
              "number"
            ]
          },
          "description": "Id of datum",
          "name": "datum.id"
        },
        {
          "type": {
            "names": [
              "integer"
            ]
          },
          "description": "Index of datum in the data",
          "name": "index"
        },
        {
          "type": {
            "names": [
              "Array.<datum>"
            ]
          },
          "description": "Array of current data",
          "name": "arr"
        }
      ],
      "longname": "marker-point-data-accessor",
      "scope": "global",
      "___id": "T000002R000672",
      "___s": true
    },
    {
      "comment": "/**\n * The data to use for encoding a property of the point.\n *\n * The specified source will provide the point marker with data.\n * @typedef marker-point-data\n * @property {string} source - Data field\n * @property {marker-point-data-accessor} [fn] - Data accessor. Custom data accessor which will be called for each datum. The return value is used for the specified property.\n * @property {string} [scale] - Name of a predefined scale. Not used if fn is defined.\n * @example\n * // the following definition will provide data from the first measure in the form: [{value: 3, label: \"$3\", id: 0}, ...]\n * {\n *   source: \"/qMeasureInfo/0\"\n * }\n */",
      "meta": {
        "range": [
          2233,
          2875
        ],
        "filename": "index.js",
        "lineno": 67,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/chart-components/markers/point",
        "code": {}
      },
      "description": "The data to use for encoding a property of the point.\n\nThe specified source will provide the point marker with data.",
      "kind": "typedef",
      "name": "marker-point-data",
      "properties": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Data field",
          "name": "source"
        },
        {
          "type": {
            "names": [
              "marker-point-data-accessor"
            ]
          },
          "optional": true,
          "description": "Data accessor. Custom data accessor which will be called for each datum. The return value is used for the specified property.",
          "name": "fn"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "description": "Name of a predefined scale. Not used if fn is defined.",
          "name": "scale"
        }
      ],
      "examples": [
        "// the following definition will provide data from the first measure in the form: [{value: 3, label: \"$3\", id: 0}, ...]\n{\n  source: \"/qMeasureInfo/0\"\n}"
      ],
      "longname": "marker-point-data",
      "scope": "global",
      "___id": "T000002R000683",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef Chart.DataProps\n * @property {string} type - the type of data parser to use\n * @property {object} data - data property to send to data parser\n * @example\n * {\n *   type: \"q\",\n *   data: {...}\n * }\n */",
      "meta": {
        "range": [
          40,
          256
        ],
        "filename": "chart.js",
        "lineno": 3,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/charts",
        "code": {}
      },
      "kind": "typedef",
      "name": "DataProps",
      "properties": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "the type of data parser to use",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "data property to send to data parser",
          "name": "data"
        }
      ],
      "examples": [
        "{\n  type: \"q\",\n  data: {...}\n}"
      ],
      "memberof": "Chart",
      "longname": "Chart.DataProps",
      "scope": "static",
      "___id": "T000002R000878",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef Chart.SettingsProps\n * @property {Chart.ScaleProps} scales\n * @property {object} components\n * @property {marker[]} components.markers,\n * @property {axis[]} components.axes\n * @example\n * {\n *   scales: {\n *     x: {...}\n *   },\n *   components: {\n *     axes: [...]\n *     markers: [...]\n *   }\n * }\n */",
      "meta": {
        "range": [
          258,
          579
        ],
        "filename": "chart.js",
        "lineno": 14,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/charts",
        "code": {}
      },
      "kind": "typedef",
      "name": "SettingsProps",
      "properties": [
        {
          "type": {
            "names": [
              "Chart.ScaleProps"
            ]
          },
          "name": "scales"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "components"
        },
        {
          "type": {
            "names": [
              "Array.<marker>"
            ]
          },
          "name": "components.markers,"
        },
        {
          "type": {
            "names": [
              "Array.<axis>"
            ]
          },
          "name": "components.axes"
        }
      ],
      "examples": [
        "{\n  scales: {\n    x: {...}\n  },\n  components: {\n    axes: [...]\n    markers: [...]\n  }\n}"
      ],
      "memberof": "Chart",
      "longname": "Chart.SettingsProps",
      "scope": "static",
      "___id": "T000002R000879",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef Chart.ScaleProps\n * @property {string} source - The data source used as input when creating the scale\n * @property {string} [type] - The type of scale to create\n * @property {boolean} invert - Whether to invert the scale's output\n * @example\n * {\n *   source: \"whatever is accepted by the data parser\",\n *   type: \"color\",\n *   invert: true\n * }\n */",
      "meta": {
        "range": [
          581,
          946
        ],
        "filename": "chart.js",
        "lineno": 32,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/charts",
        "code": {}
      },
      "kind": "typedef",
      "name": "ScaleProps",
      "properties": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The data source used as input when creating the scale",
          "name": "source"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "description": "The type of scale to create",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Whether to invert the scale's output",
          "name": "invert"
        }
      ],
      "examples": [
        "{\n  source: \"whatever is accepted by the data parser\",\n  type: \"color\",\n  invert: true\n}"
      ],
      "memberof": "Chart",
      "longname": "Chart.ScaleProps",
      "scope": "static",
      "___id": "T000002R000880",
      "___s": true
    },
    {
      "comment": "/**\n   * @constructor\n   * @param {HTMLElement} element\n   * @param {Chart.DataProps} data\n   * @param {Chart.SettingsProps} settings\n   * @returns {Chart}\n   */",
      "meta": {
        "range": [
          1128,
          1309
        ],
        "filename": "chart.js",
        "lineno": 53,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/charts",
        "code": {
          "id": "astnode100007461",
          "name": "Chart",
          "type": "MethodDefinition",
          "paramnames": [
            "element",
            "d",
            "settings"
          ]
        },
        "vars": {
          "": null
        }
      },
      "kind": "class",
      "params": [
        {
          "type": {
            "names": [
              "HTMLElement"
            ]
          },
          "name": "element"
        },
        {
          "type": {
            "names": [
              "Chart.DataProps"
            ]
          },
          "name": "data"
        },
        {
          "type": {
            "names": [
              "Chart.SettingsProps"
            ]
          },
          "name": "settings"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Chart"
            ]
          }
        }
      ],
      "name": "Chart",
      "longname": "Chart",
      "scope": "global",
      "___id": "T000002R000882",
      "___s": true
    },
    {
      "comment": "/**\n * The chart creator\n * @memberof picasso\n * @alias chart\n * @param  {DOMElement} element - Element to draw the chart in\n * @param  {Chart.DataProps} data - Data\n * @param  {Chart.SettingsProps} settings - Settings\n * @return {Chart}\n * @example\n * picasso.chart( element,\n * {\n *   type: \"q\",\n *   data: layout.qHyperCube\n * },\n * {\n *   scales: {\n *     x: {\n *       source: \"/qHyperCube/qMeasureInfo/0\"\n *     },\n *     y: {\n *       source: \"/qHyperCube/qDimensionInfo/0\"\n *     }\n *   },\n *   components: {\n *     markers: [\n *       {\n *         type: \"point\",\n *         settings: {\n *           fill: 'red'\n *         }\n *       }\n *     ]\n *   }\n * } );\n */",
      "meta": {
        "range": [
          1985,
          2075
        ],
        "filename": "chart.js",
        "lineno": 98,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/charts",
        "code": {
          "id": "astnode100007499",
          "name": "chartFn",
          "type": "FunctionDeclaration",
          "paramnames": [
            "element",
            "data",
            "settings"
          ]
        }
      },
      "description": "The chart creator",
      "memberof": "picasso",
      "alias": "chart",
      "params": [
        {
          "type": {
            "names": [
              "DOMElement"
            ]
          },
          "description": "Element to draw the chart in",
          "name": "element"
        },
        {
          "type": {
            "names": [
              "Chart.DataProps"
            ]
          },
          "description": "Data",
          "name": "data"
        },
        {
          "type": {
            "names": [
              "Chart.SettingsProps"
            ]
          },
          "description": "Settings",
          "name": "settings"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Chart"
            ]
          }
        }
      ],
      "examples": [
        "picasso.chart( element,\n{\n  type: \"q\",\n  data: layout.qHyperCube\n},\n{\n  scales: {\n    x: {\n      source: \"/qHyperCube/qMeasureInfo/0\"\n    },\n    y: {\n      source: \"/qHyperCube/qDimensionInfo/0\"\n    }\n  },\n  components: {\n    markers: [\n      {\n        type: \"point\",\n        settings: {\n          fill: 'red'\n        }\n      }\n    ]\n  }\n} );"
      ],
      "name": "chart",
      "longname": "picasso.chart",
      "kind": "function",
      "scope": "static",
      "___id": "T000002R000886",
      "___s": true
    },
    {
      "comment": "/**\n  * Color instantiator\n  * @private\n  * @param { ...Object } ...c The color representation, can be any type that is recognized by a registered color instantiator\n  * @return { RgbaColor | HslaColor } Color instance, the type returned depends on the color instantiator that recognizes the color\n  * @example\n  * color( \"#fff\" );\n  * color( \"rgb(0, 0, 0)\" );\n  * color( \"hsl(0, 50%, 50%)\" );\n  * color( \"red\" );\n  */",
      "meta": {
        "range": [
          442,
          612
        ],
        "filename": "color.js",
        "lineno": 14,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100008965",
          "name": "color",
          "type": "FunctionDeclaration",
          "paramnames": [
            "c"
          ]
        },
        "vars": {
          "i": "color~i"
        }
      },
      "description": "Color instantiator",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "variable": true,
          "description": "The color representation, can be any type that is recognized by a registered color instantiator",
          "name": "...c"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "RgbaColor",
              "HslaColor"
            ]
          },
          "description": "Color instance, the type returned depends on the color instantiator that recognizes the color"
        }
      ],
      "examples": [
        "color( \"#fff\" );\ncolor( \"rgb(0, 0, 0)\" );\ncolor( \"hsl(0, 50%, 50%)\" );\ncolor( \"red\" );"
      ],
      "name": "color",
      "longname": "color",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R001021",
      "___s": true
    },
    {
      "comment": "/**\n * Register a color instantiator\n * @memberof picasso.color\n * @private\n * @param  { Function } test The function that test if a color is recognized\n * @param  { Function } fn   The function that instanciates a new color instance\n * @example\n * let fn = () => {\n *   return {\n *     r: Math.floor(Math.random()*255),\n *     g: Math.floor(Math.random()*255),\n *     b: Math.floor(Math.random()*255)\n *   };\n * };\n *\n * let fnTest = c => c === \"surprise\";\n * color.register( fnTest, fn );\n *\n * let someColor = color(\"surprise\");\n */",
      "meta": {
        "range": [
          1150,
          1215
        ],
        "filename": "color.js",
        "lineno": 44,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100009005",
          "name": "color.register",
          "type": "ArrowFunctionExpression",
          "paramnames": [
            "test",
            "fn"
          ]
        }
      },
      "description": "Register a color instantiator",
      "memberof": "picasso.color",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function that test if a color is recognized",
          "name": "test"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function that instanciates a new color instance",
          "name": "fn"
        }
      ],
      "examples": [
        "let fn = () => {\n  return {\n    r: Math.floor(Math.random()*255),\n    g: Math.floor(Math.random()*255),\n    b: Math.floor(Math.random()*255)\n  };\n};\n\nlet fnTest = c => c === \"surprise\";\ncolor.register( fnTest, fn );\n\nlet someColor = color(\"surprise\");"
      ],
      "name": "color.register",
      "longname": "picasso.color.color.register",
      "kind": "function",
      "scope": "static",
      "___id": "T000002R001023",
      "___s": true
    },
    {
      "comment": "/**\n * Extend the color function with new methods\n * @memberof picasso.color\n * @private\n * @param  { String } name Name of the property\n * @param  { Object } obj Object to extend with\n * @example\n * let fn = () => {\n *   return color( {\n *     r: Math.floor(Math.random()*255),\n *     g: Math.floor(Math.random()*255),\n *     b: Math.floor(Math.random()*255)\n *   } );\n * };\n *\n * color.extend( \"randomColor\", fn );\n * color.randomColor();\n */",
      "meta": {
        "range": [
          1663,
          1811
        ],
        "filename": "color.js",
        "lineno": 66,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100009024",
          "name": "color.extend",
          "type": "ArrowFunctionExpression",
          "paramnames": [
            "name",
            "obj"
          ]
        },
        "vars": {
          "color[undefined]": null
        }
      },
      "description": "Extend the color function with new methods",
      "memberof": "picasso.color",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Name of the property",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Object to extend with",
          "name": "obj"
        }
      ],
      "examples": [
        "let fn = () => {\n  return color( {\n    r: Math.floor(Math.random()*255),\n    g: Math.floor(Math.random()*255),\n    b: Math.floor(Math.random()*255)\n  } );\n};\n\ncolor.extend( \"randomColor\", fn );\ncolor.randomColor();"
      ],
      "name": "color.extend",
      "longname": "picasso.color.color.extend",
      "kind": "function",
      "scope": "static",
      "___id": "T000002R001026",
      "___s": true
    },
    {
      "comment": "/**\n * Converts HSL to RGB.\n * @ignore\n * @param h - The hue\n * @param s - The saturation\n * @param l - The lightness\n * @returns {string} - In format 0, 0, 0\n */",
      "meta": {
        "range": [
          560,
          957
        ],
        "filename": "hsla-color.js",
        "lineno": 27,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100009158",
          "name": "toRgb",
          "type": "FunctionDeclaration",
          "paramnames": [
            "h",
            "s",
            "l"
          ]
        },
        "vars": {
          "r": "toRgb~r",
          "g": "toRgb~g",
          "b": "toRgb~b",
          "h": "toRgb~h",
          "q": "toRgb~q",
          "p": "toRgb~p"
        }
      },
      "description": "Converts HSL to RGB.",
      "ignore": true,
      "params": [
        {
          "description": "The hue",
          "name": "h"
        },
        {
          "description": "The saturation",
          "name": "s"
        },
        {
          "description": "The lightness",
          "name": "l"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "- In format 0, 0, 0"
        }
      ],
      "name": "toRgb",
      "longname": "toRgb",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R001035",
      "___s": true
    },
    {
      "comment": "/**\n   * Create a HSLA Color\n   * @private\n   * @param { Number } h The hue value\n   * @param { Number } s The saturation value\n   * @param { Number } l The lightness value\n   * @param { Number } [ a=1 ] The alpha value\n   */",
      "meta": {
        "range": [
          1371,
          1468
        ],
        "filename": "hsla-color.js",
        "lineno": 68,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100009314",
          "name": "HslaColor",
          "type": "MethodDefinition",
          "paramnames": [
            "h",
            "s",
            "l",
            "a"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create a HSLA Color",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The hue value",
          "name": "h"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The saturation value",
          "name": "s"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The lightness value",
          "name": "l"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 1,
          "description": "The alpha value",
          "name": "a"
        }
      ],
      "name": "HslaColor",
      "longname": "HslaColor",
      "kind": "class",
      "scope": "global",
      "___id": "T000002R001056",
      "___s": true
    },
    {
      "comment": "/**\n  * Returns a hsl string representation of this color.\n  * @returns { String } In format hsl(0, 0%, 0%)\n  */",
      "meta": {
        "range": [
          1587,
          1681
        ],
        "filename": "hsla-color.js",
        "lineno": 79,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100009348",
          "name": "HslaColor#toHSL",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns a hsl string representation of this color.",
      "returns": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "In format hsl(0, 0%, 0%)"
        }
      ],
      "name": "toHSL",
      "longname": "HslaColor#toHSL",
      "kind": "function",
      "memberof": "HslaColor",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001061",
      "___s": true
    },
    {
      "comment": "/**\n   * Returns a hsla string representation of this color.\n   * @return { String } In format hsla(0, 0%, 0%, 0)\n   */",
      "meta": {
        "range": [
          1807,
          1849
        ],
        "filename": "hsla-color.js",
        "lineno": 87,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100009371",
          "name": "HslaColor#toHSLA",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns a hsla string representation of this color.",
      "returns": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "In format hsla(0, 0%, 0%, 0)"
        }
      ],
      "name": "toHSLA",
      "longname": "HslaColor#toHSLA",
      "kind": "function",
      "memberof": "HslaColor",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001062",
      "___s": true
    },
    {
      "comment": "/**\n   * Returns an rgb string representation of this color.\n   * @return { String } In format rgb(0, 0, 0)\n   */",
      "meta": {
        "range": [
          1969,
          2077
        ],
        "filename": "hsla-color.js",
        "lineno": 95,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100009380",
          "name": "HslaColor#toRGB",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns an rgb string representation of this color.",
      "returns": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "In format rgb(0, 0, 0)"
        }
      ],
      "name": "toRGB",
      "longname": "HslaColor#toRGB",
      "kind": "function",
      "memberof": "HslaColor",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001063",
      "___s": true
    },
    {
      "comment": "/**\n   * Returns an rgba string representation of this color.\n   * @return { String } In format rgba(0, 0, 0, 0)\n   */",
      "meta": {
        "range": [
          2202,
          2323
        ],
        "filename": "hsla-color.js",
        "lineno": 104,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100009413",
          "name": "HslaColor#toRGBA",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns an rgba string representation of this color.",
      "returns": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "In format rgba(0, 0, 0, 0)"
        }
      ],
      "name": "toRGBA",
      "longname": "HslaColor#toRGBA",
      "kind": "function",
      "memberof": "HslaColor",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001065",
      "___s": true
    },
    {
      "comment": "/**\n   * Returns a hex string representation of this color.\n   * @return { String } In format #000000\n   */",
      "meta": {
        "range": [
          2437,
          2585
        ],
        "filename": "hsla-color.js",
        "lineno": 113,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100009450",
          "name": "HslaColor#toHex",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns a hex string representation of this color.",
      "returns": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "In format #000000"
        }
      ],
      "name": "toHex",
      "longname": "HslaColor#toHex",
      "kind": "function",
      "memberof": "HslaColor",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001067",
      "___s": true
    },
    {
      "comment": "/**\n   * Returns an number representation of the color\n   * @return { Number } Unsigned 24 bt integer in the range 0-16 777 216\n   */",
      "meta": {
        "range": [
          2725,
          2839
        ],
        "filename": "hsla-color.js",
        "lineno": 122,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100009489",
          "name": "HslaColor#toNumber",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns an number representation of the color",
      "returns": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Unsigned 24 bt integer in the range 0-16 777 216"
        }
      ],
      "name": "toNumber",
      "longname": "HslaColor#toNumber",
      "kind": "function",
      "memberof": "HslaColor",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001069",
      "___s": true
    },
    {
      "comment": "/**\n   * Returns a string representation of this color.\n   * @returns { String } In format hsla(0, 0%, 0%, 0)\n   */",
      "meta": {
        "range": [
          2961,
          3070
        ],
        "filename": "hsla-color.js",
        "lineno": 132,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100009523",
          "name": "HslaColor#toString",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns a string representation of this color.",
      "returns": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "In format hsla(0, 0%, 0%, 0)"
        }
      ],
      "name": "toString",
      "longname": "HslaColor#toString",
      "kind": "function",
      "memberof": "HslaColor",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001071",
      "___s": true
    },
    {
      "comment": "/**\n   * Compares two colors.\n   * @param { HslaColor } c The color to compare with.\n   * @return { Boolean } True if the hsl channels are the same, false otherwise\n   */",
      "meta": {
        "range": [
          3247,
          3354
        ],
        "filename": "hsla-color.js",
        "lineno": 141,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100009550",
          "name": "HslaColor#isEqual",
          "type": "MethodDefinition",
          "paramnames": [
            "c"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Compares two colors.",
      "params": [
        {
          "type": {
            "names": [
              "HslaColor"
            ]
          },
          "description": "The color to compare with.",
          "name": "c"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "True if the hsl channels are the same, false otherwise"
        }
      ],
      "name": "isEqual",
      "longname": "HslaColor#isEqual",
      "kind": "function",
      "memberof": "HslaColor",
      "scope": "instance",
      "___id": "T000002R001072",
      "___s": true
    },
    {
      "comment": "/**\n   * Checks if this color is perceived as dark.\n   * @return { Boolean } True if the luminance is below 125, false otherwise.\n   */",
      "meta": {
        "range": [
          3496,
          3546
        ],
        "filename": "hsla-color.js",
        "lineno": 149,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100009587",
          "name": "HslaColor#isDark",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Checks if this color is perceived as dark.",
      "returns": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "True if the luminance is below 125, false otherwise."
        }
      ],
      "name": "isDark",
      "longname": "HslaColor#isDark",
      "kind": "function",
      "memberof": "HslaColor",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001073",
      "___s": true
    },
    {
      "comment": "/**\n   * Calculates the perceived luminance of the color.\n   * @return { Number } A value in the range 0-1 where a low value is considered dark and vice versa.\n   */",
      "meta": {
        "range": [
          3718,
          3930
        ],
        "filename": "hsla-color.js",
        "lineno": 157,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100009598",
          "name": "HslaColor#luminance",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Calculates the perceived luminance of the color.",
      "returns": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "A value in the range 0-1 where a low value is considered dark and vice versa."
        }
      ],
      "name": "luminance",
      "longname": "HslaColor#luminance",
      "kind": "function",
      "memberof": "HslaColor",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001074",
      "___s": true
    },
    {
      "comment": "/**\n * Instantiate a new color object\n * @ignore\n * @param { String } colStr Keyword representation of a Color.\n * Support basic and extended keywords defined at {@link https://www.w3.org/TR/css3-color/#svg-color}\n * @return { RgbaColor } Color instance\n * @example\n * colorKeyWord( \"yellow\" );\n */",
      "meta": {
        "range": [
          6230,
          6402
        ],
        "filename": "color-keyword.js",
        "lineno": 162,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors/instantiator",
        "code": {
          "id": "astnode100010939",
          "name": "module.exports",
          "type": "FunctionDeclaration",
          "paramnames": [
            "colStr"
          ]
        }
      },
      "description": "Instantiate a new color object",
      "ignore": true,
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Keyword representation of a Color.\nSupport basic and extended keywords defined at {@link https://www.w3.org/TR/css3-color/#svg-color}",
          "name": "colStr"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "RgbaColor"
            ]
          },
          "description": "Color instance"
        }
      ],
      "examples": [
        "colorKeyWord( \"yellow\" );"
      ],
      "name": "exports",
      "longname": "module.exports",
      "kind": "function",
      "memberof": "module",
      "scope": "static",
      "___id": "T000002R001668",
      "___s": true
    },
    {
      "comment": "/**\n * Test if the object is a color instance\n * @ignore\n * @function test\n * @param  { String } colStr Keyword representation of a Color.\n * @return { Boolean } TRUE if colrStr matches on of the basic and extended keywords defined at {@link https://www.w3.org/TR/css3-color/#svg-color}\n * @example\n * colorKeyWord.test( \"yellowgreen\" );\n */",
      "meta": {
        "range": [
          6404,
          6745
        ],
        "filename": "color-keyword.js",
        "lineno": 169,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors/instantiator",
        "code": {}
      },
      "description": "Test if the object is a color instance",
      "ignore": true,
      "kind": "function",
      "name": "test",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Keyword representation of a Color.",
          "name": "colStr"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "TRUE if colrStr matches on of the basic and extended keywords defined at {@link https://www.w3.org/TR/css3-color/#svg-color}"
        }
      ],
      "examples": [
        "colorKeyWord.test( \"yellowgreen\" );"
      ],
      "longname": "test",
      "scope": "global",
      "___id": "T000002R001672",
      "___s": true
    },
    {
      "comment": "/**\n * Instanciate a new color object\n * @ignore\n * @param { Object } colorObj Color object\n * @param { Number } colorObj.h Required for an HSL object\n * @param { Number } colorObj.s Required for an HSL object\n * @param { Number } colorObj.l Required for an HSL object\n * @param { Number } colorObj.r Required for an RGB object\n * @param { Number } colorObj.g Required for an RGB object\n * @param { Number } colorObj.b Required for an RGB object\n * @return { HslaColor | RgbaColor } Color instance, the type returned depends on the color input\n * @example\n * colorObject( { r:255, g: 123, b: 123 } );\n */",
      "meta": {
        "range": [
          804,
          1158
        ],
        "filename": "color-object.js",
        "lineno": 22,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors/instantiator",
        "code": {
          "id": "astnode100011046",
          "name": "module.exports",
          "type": "FunctionDeclaration",
          "paramnames": [
            "colorObj"
          ]
        }
      },
      "description": "Instanciate a new color object",
      "ignore": true,
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Color object",
          "name": "colorObj"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Required for an HSL object",
          "name": "colorObj.h"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Required for an HSL object",
          "name": "colorObj.s"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Required for an HSL object",
          "name": "colorObj.l"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Required for an RGB object",
          "name": "colorObj.r"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Required for an RGB object",
          "name": "colorObj.g"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Required for an RGB object",
          "name": "colorObj.b"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "HslaColor",
              "RgbaColor"
            ]
          },
          "description": "Color instance, the type returned depends on the color input"
        }
      ],
      "examples": [
        "colorObject( { r:255, g: 123, b: 123 } );"
      ],
      "name": "exports",
      "longname": "module.exports",
      "kind": "function",
      "memberof": "module",
      "scope": "static",
      "___id": "T000002R001676",
      "___s": true
    },
    {
      "comment": "/**\n * Test if the object is a color instance\n * @ignore\n * @function test\n * @param  { Object } obj Color object\n * @return { Boolean } TRUE if obj is an instance of RgbaColor or HslaColor\n * @example\n * colorObject.test( { r:255, g: 123, b: 123 } );\n */",
      "meta": {
        "range": [
          1160,
          1415
        ],
        "filename": "color-object.js",
        "lineno": 35,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors/instantiator",
        "code": {}
      },
      "description": "Test if the object is a color instance",
      "ignore": true,
      "kind": "function",
      "name": "test",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Color object",
          "name": "obj"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "TRUE if obj is an instance of RgbaColor or HslaColor"
        }
      ],
      "examples": [
        "colorObject.test( { r:255, g: 123, b: 123 } );"
      ],
      "longname": "test",
      "scope": "global",
      "___id": "T000002R001679",
      "___s": true
    },
    {
      "comment": "/**\n * Get the color type from a color object\n * @ignore\n * @function getColorType\n * @param  { Object } obj Color object\n * @return { String } rgb or hsl denpeding on the color type, undefined if no match is found\n * @example\n * colorObject.getColorType( { r:255, g: 123, b: 123 } )\n */",
      "meta": {
        "range": [
          1674,
          1961
        ],
        "filename": "color-object.js",
        "lineno": 51,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors/instantiator",
        "code": {}
      },
      "description": "Get the color type from a color object",
      "ignore": true,
      "kind": "function",
      "name": "getColorType",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Color object",
          "name": "obj"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "rgb or hsl denpeding on the color type, undefined if no match is found"
        }
      ],
      "examples": [
        "colorObject.getColorType( { r:255, g: 123, b: 123 } )"
      ],
      "longname": "getColorType",
      "scope": "global",
      "___id": "T000002R001681",
      "___s": true
    },
    {
      "comment": "/**\n * Instanciate a new color object\n * @ignore\n * @param { String } colStr HEX representation of a Color.\n * Supports HEX defintion at {@link https://www.w3.org/TR/css3-color/#svg-color}\n * @return { RgbaColor } Color instance\n * @example\n * hex( \"#fff\" );\n * hex( \"#ffffff\" );\n*/",
      "meta": {
        "range": [
          471,
          682
        ],
        "filename": "hex.js",
        "lineno": 16,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors/instantiator",
        "code": {
          "id": "astnode100011183",
          "name": "module.exports",
          "type": "FunctionDeclaration",
          "paramnames": [
            "colStr"
          ]
        }
      },
      "description": "Instanciate a new color object",
      "ignore": true,
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "HEX representation of a Color.\nSupports HEX defintion at {@link https://www.w3.org/TR/css3-color/#svg-color}",
          "name": "colStr"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "RgbaColor"
            ]
          },
          "description": "Color instance"
        }
      ],
      "examples": [
        "hex( \"#fff\" );\nhex( \"#ffffff\" );"
      ],
      "name": "exports",
      "longname": "module.exports",
      "kind": "function",
      "memberof": "module",
      "scope": "static",
      "___id": "T000002R001685",
      "___s": true
    },
    {
      "comment": "/**\n * Test if the object is a color instance\n * @ignore\n * @function test\n * @param  { String } colStr HEX representation of a Color.\n * @return { Boolean } TRUE if colrStr matches HEX notation defined at {@link https://www.w3.org/TR/css3-color/#svg-color}\n * @example\n * hex.test( \"#fff\" );\n */",
      "meta": {
        "range": [
          684,
          980
        ],
        "filename": "hex.js",
        "lineno": 24,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors/instantiator",
        "code": {}
      },
      "description": "Test if the object is a color instance",
      "ignore": true,
      "kind": "function",
      "name": "test",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "HEX representation of a Color.",
          "name": "colStr"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "TRUE if colrStr matches HEX notation defined at {@link https://www.w3.org/TR/css3-color/#svg-color}"
        }
      ],
      "examples": [
        "hex.test( \"#fff\" );"
      ],
      "longname": "test",
      "scope": "global",
      "___id": "T000002R001687",
      "___s": true
    },
    {
      "comment": "/**\n * Instanciate a new color object\n * @ignore\n * @param { String } colStr HSL representation of a Color.\n * Supports HSL and HSLA defintion at {@link https://www.w3.org/TR/css3-color/#svg-color}\n * @return { HslaColor } Color instance\n * @example\n * hsl( \"hsl(120, 50%, 50%)\" );\n * hsl( \"hsla(120, 50%, 50%, 0.5)\" );\n*/",
      "meta": {
        "range": [
          581,
          1280
        ],
        "filename": "hsl.js",
        "lineno": 16,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors/instantiator",
        "code": {
          "id": "astnode100011268",
          "name": "module.exports",
          "type": "FunctionDeclaration",
          "paramnames": [
            "colStr"
          ]
        }
      },
      "description": "Instanciate a new color object",
      "ignore": true,
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "HSL representation of a Color.\nSupports HSL and HSLA defintion at {@link https://www.w3.org/TR/css3-color/#svg-color}",
          "name": "colStr"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "HslaColor"
            ]
          },
          "description": "Color instance"
        }
      ],
      "examples": [
        "hsl( \"hsl(120, 50%, 50%)\" );\nhsl( \"hsla(120, 50%, 50%, 0.5)\" );"
      ],
      "name": "exports",
      "longname": "module.exports",
      "kind": "function",
      "memberof": "module",
      "scope": "static",
      "___id": "T000002R001691",
      "___s": true
    },
    {
      "comment": "/**\n * Test if the object is a color instance\n * @ignore\n * @function test\n * @param  { String } colStr HSL representation of a Color.\n * @return { Boolean } TRUE if colrStr matches HSL and HSLA notation defined at {@link https://www.w3.org/TR/css3-color/#svg-color}\n * @example\n * hsl.test( \"hsl(120, 50%, 50%)\" );\n */",
      "meta": {
        "range": [
          1282,
          1601
        ],
        "filename": "hsl.js",
        "lineno": 41,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors/instantiator",
        "code": {}
      },
      "description": "Test if the object is a color instance",
      "ignore": true,
      "kind": "function",
      "name": "test",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "HSL representation of a Color.",
          "name": "colStr"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "TRUE if colrStr matches HSL and HSLA notation defined at {@link https://www.w3.org/TR/css3-color/#svg-color}"
        }
      ],
      "examples": [
        "hsl.test( \"hsl(120, 50%, 50%)\" );"
      ],
      "longname": "test",
      "scope": "global",
      "___id": "T000002R001700",
      "___s": true
    },
    {
      "comment": "/**\n * Instantiate a new color object\n * @ignore\n * @param { String } colStr RGB representation of a Color.\n * Supports RGB and RGBA defintion at {@link https://www.w3.org/TR/css3-color/#svg-color}\n * @return { RgbaColor } Color instance\n * @example\n * rgb( \"rgb(120, 50, 50)\" );\n * rgb( \"rgb(120, 50, 50, 0.5)\" );\n*/",
      "meta": {
        "range": [
          767,
          1531
        ],
        "filename": "rgb.js",
        "lineno": 18,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors/instantiator",
        "code": {
          "id": "astnode100011432",
          "name": "module.exports",
          "type": "FunctionDeclaration",
          "paramnames": [
            "colStr"
          ]
        }
      },
      "description": "Instantiate a new color object",
      "ignore": true,
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "RGB representation of a Color.\nSupports RGB and RGBA defintion at {@link https://www.w3.org/TR/css3-color/#svg-color}",
          "name": "colStr"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "RgbaColor"
            ]
          },
          "description": "Color instance"
        }
      ],
      "examples": [
        "rgb( \"rgb(120, 50, 50)\" );\nrgb( \"rgb(120, 50, 50, 0.5)\" );"
      ],
      "name": "exports",
      "longname": "module.exports",
      "kind": "function",
      "memberof": "module",
      "scope": "static",
      "___id": "T000002R001706",
      "___s": true
    },
    {
      "comment": "/**\n * Test if the object is a color instance\n * @ignore\n * @function test\n * @param  { String } colStr RGB representation of a Color.\n * @return { Boolean } TRUE if colrStr matches RGB and RGBA notation defined at {@link https://www.w3.org/TR/css3-color/#svg-color}\n * @example\n * rgb.test( \"rgb(120, 50, 50)\" );\n */",
      "meta": {
        "range": [
          1533,
          1850
        ],
        "filename": "rgb.js",
        "lineno": 47,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors/instantiator",
        "code": {}
      },
      "description": "Test if the object is a color instance",
      "ignore": true,
      "kind": "function",
      "name": "test",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "RGB representation of a Color.",
          "name": "colStr"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "TRUE if colrStr matches RGB and RGBA notation defined at {@link https://www.w3.org/TR/css3-color/#svg-color}"
        }
      ],
      "examples": [
        "rgb.test( \"rgb(120, 50, 50)\" );"
      ],
      "longname": "test",
      "scope": "global",
      "___id": "T000002R001719",
      "___s": true
    },
    {
      "comment": "/**\n  * Interpolate two colors\n  * @private\n  * @param  { Object } from The color to interpolate from\n  * @param  { Object } to   The color to interpolate to\n  * @param  { Number } t  A number between [0-1]\n  * @return { RgbaColor | HslaColor } Color instance, the type returned is the same as the type of the \"to\" color\n  * @example\n  * interpolate( \"blue\", \"red\", 0.5 );\n  */",
      "meta": {
        "range": [
          554,
          1532
        ],
        "filename": "interpolators.js",
        "lineno": 16,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100011645",
          "name": "interpolate",
          "type": "ArrowFunctionExpression"
        },
        "vars": {
          "fromC": "module.exports.interpolate~fromC",
          "toC": "module.exports.interpolate~toC",
          "colorObj": "module.exports.interpolate~colorObj",
          "targetType": "module.exports.interpolate~targetType",
          "colorObj.r": "module.exports.interpolate~colorObj.r",
          "colorObj.g": "module.exports.interpolate~colorObj.g",
          "colorObj.b": "module.exports.interpolate~colorObj.b",
          "colorObj.h": "module.exports.interpolate~colorObj.h",
          "colorObj.s": "module.exports.interpolate~colorObj.s",
          "colorObj.l": "module.exports.interpolate~colorObj.l"
        }
      },
      "description": "Interpolate two colors",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The color to interpolate from",
          "name": "from"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The color to interpolate to",
          "name": "to"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "A number between [0-1]",
          "name": "t"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "RgbaColor",
              "HslaColor"
            ]
          },
          "description": "Color instance, the type returned is the same as the type of the \"to\" color"
        }
      ],
      "examples": [
        "interpolate( \"blue\", \"red\", 0.5 );"
      ],
      "name": "interpolate",
      "longname": "module.exports.interpolate",
      "kind": "function",
      "memberof": "module.exports",
      "scope": "static",
      "___id": "T000002R001722",
      "___s": true
    },
    {
      "comment": "/**\n * @memberof picasso.color\n * @namespace\n * @private\n * @type {Object}\n */",
      "meta": {
        "range": [
          405,
          3203
        ],
        "filename": "palettes.js",
        "lineno": 24,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100011912",
          "name": "palettes",
          "type": "ObjectExpression",
          "value": "{\"scientific\":\"\",\"multiHue1\":\"\",\"colors12\":\"\",\"colors100\":\"\"}"
        }
      },
      "memberof": "picasso.color",
      "kind": "namespace",
      "access": "private",
      "type": {
        "names": [
          "Object"
        ]
      },
      "name": "palettes",
      "longname": "picasso.color.palettes",
      "scope": "static",
      "___id": "T000002R001739",
      "___s": true
    },
    {
      "comment": "/**\n   * Palettet for Cold to Warm colors\n   * @param { Number } min Minimum value of the domain\n   * @param { Number } max Maximum value of the domain\n   * @return { LinearScale } Color scale where the domain is calucated base on min/max and range is a predefined set of colors\n   */",
      "meta": {
        "range": [
          707,
          982
        ],
        "filename": "palettes.js",
        "lineno": 31,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100011915",
          "name": "scientific",
          "type": "ArrowFunctionExpression"
        },
        "vars": {
          "colorPalette": "picasso.color.palettes.scientific~colorPalette",
          "from": "picasso.color.palettes.scientific~from"
        }
      },
      "description": "Palettet for Cold to Warm colors",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Minimum value of the domain",
          "name": "min"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Maximum value of the domain",
          "name": "max"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "LinearScale"
            ]
          },
          "description": "Color scale where the domain is calucated base on min/max and range is a predefined set of colors"
        }
      ],
      "name": "scientific",
      "longname": "picasso.color.palettes.scientific",
      "kind": "function",
      "memberof": "picasso.color.palettes",
      "scope": "static",
      "___id": "T000002R001740",
      "___s": true
    },
    {
      "comment": "/**\n   * Palettet for single hue color\n   * @param { Number } min Minimum value of the domain\n   * @param { Number } max Maximum value of the domain\n   * @return { LinearScale } Color scale where the domain is calucated base on min/max and range is a predefined set of colors\n   */",
      "meta": {
        "range": [
          1271,
          1512
        ],
        "filename": "palettes.js",
        "lineno": 45,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100011953",
          "name": "multiHue1",
          "type": "ArrowFunctionExpression"
        },
        "vars": {
          "colorPalette": "picasso.color.palettes.multiHue1~colorPalette",
          "from": "picasso.color.palettes.multiHue1~from"
        }
      },
      "description": "Palettet for single hue color",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Minimum value of the domain",
          "name": "min"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Maximum value of the domain",
          "name": "max"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "LinearScale"
            ]
          },
          "description": "Color scale where the domain is calucated base on min/max and range is a predefined set of colors"
        }
      ],
      "name": "multiHue1",
      "longname": "picasso.color.palettes.multiHue1",
      "kind": "function",
      "memberof": "picasso.color.palettes",
      "scope": "static",
      "___id": "T000002R001743",
      "___s": true
    },
    {
      "comment": "/**\n   * Palettet for 12 colors\n   * @return { RgbaColor[] } A collection of 12 colors\n   */",
      "meta": {
        "range": [
          1612,
          1847
        ],
        "filename": "palettes.js",
        "lineno": 57,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100011988",
          "name": "colors12",
          "type": "ArrowFunctionExpression"
        },
        "vars": {
          "colorPalette": "picasso.color.palettes.colors12~colorPalette"
        }
      },
      "description": "Palettet for 12 colors",
      "returns": [
        {
          "type": {
            "names": [
              "Array.<RgbaColor>"
            ]
          },
          "description": "A collection of 12 colors"
        }
      ],
      "name": "colors12",
      "longname": "picasso.color.palettes.colors12",
      "kind": "function",
      "memberof": "picasso.color.palettes",
      "scope": "static",
      "___id": "T000002R001746",
      "___s": true
    },
    {
      "comment": "/**\n   * Palettet for 100 colors\n   * @return { RgbaColor[] } A collection of 100 colors\n   */",
      "meta": {
        "range": [
          1949,
          3201
        ],
        "filename": "palettes.js",
        "lineno": 70,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100012013",
          "name": "colors100",
          "type": "ArrowFunctionExpression"
        },
        "vars": {
          "colorPalette": "picasso.color.palettes.colors100~colorPalette"
        }
      },
      "description": "Palettet for 100 colors",
      "returns": [
        {
          "type": {
            "names": [
              "Array.<RgbaColor>"
            ]
          },
          "description": "A collection of 100 colors"
        }
      ],
      "name": "colors100",
      "longname": "picasso.color.palettes.colors100",
      "kind": "function",
      "memberof": "picasso.color.palettes",
      "scope": "static",
      "___id": "T000002R001748",
      "___s": true
    },
    {
      "comment": "/**\n * Converts RGB to HSL\n * @ignore\n * @param r Red\n * @param g Green\n * @param b Blue\n * @return { String } In format 0, 0%, 0%\n */",
      "meta": {
        "range": [
          243,
          880
        ],
        "filename": "rgba-color.js",
        "lineno": 15,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100012153",
          "name": "toHSL",
          "type": "FunctionDeclaration",
          "paramnames": [
            "r",
            "g",
            "b"
          ]
        },
        "vars": {
          "r": "toHSL~r",
          "g": "toHSL~g",
          "b": "toHSL~b",
          "max": "toHSL~max",
          "min": "toHSL~min",
          "h": "toHSL~h",
          "s": "toHSL~s",
          "l": "toHSL~l",
          "d": "toHSL~d"
        }
      },
      "description": "Converts RGB to HSL",
      "ignore": true,
      "params": [
        {
          "description": "Red",
          "name": "r"
        },
        {
          "description": "Green",
          "name": "g"
        },
        {
          "description": "Blue",
          "name": "b"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "In format 0, 0%, 0%"
        }
      ],
      "name": "toHSL",
      "longname": "toHSL",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R001753",
      "___s": true
    },
    {
      "comment": "/**\n   * Class representing a RGBA Color\n   * @private\n   * @param { Number } r The red value\n   * @param { Number } g The green value\n   * @param { Number } b The blue value\n   * @param { Number } [ a=1 ] The alpha value\n   */",
      "meta": {
        "range": [
          1132,
          1229
        ],
        "filename": "rgba-color.js",
        "lineno": 58,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100012321",
          "name": "RgbaColor",
          "type": "MethodDefinition",
          "paramnames": [
            "r",
            "g",
            "b",
            "a"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Class representing a RGBA Color",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The red value",
          "name": "r"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The green value",
          "name": "g"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The blue value",
          "name": "b"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 1,
          "description": "The alpha value",
          "name": "a"
        }
      ],
      "name": "RgbaColor",
      "longname": "RgbaColor",
      "kind": "class",
      "scope": "global",
      "___id": "T000002R001771",
      "___s": true
    },
    {
      "comment": "/**\n   * Returns a hsl string representation of this color.\n   * @return { String } In format hsl(0,0,0)\n   */",
      "meta": {
        "range": [
          1346,
          1436
        ],
        "filename": "rgba-color.js",
        "lineno": 69,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100012355",
          "name": "RgbaColor#toHSL",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns a hsl string representation of this color.",
      "returns": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "In format hsl(0,0,0)"
        }
      ],
      "name": "toHSL",
      "longname": "RgbaColor#toHSL",
      "kind": "function",
      "memberof": "RgbaColor",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001776",
      "___s": true
    },
    {
      "comment": "/**\n   * Returns a hsla string representation of this color\n   * @return { String } In format hsla(0,0,0,0)\n   */",
      "meta": {
        "range": [
          1556,
          1659
        ],
        "filename": "rgba-color.js",
        "lineno": 78,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100012378",
          "name": "RgbaColor#toHSLA",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns a hsla string representation of this color",
      "returns": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "In format hsla(0,0,0,0)"
        }
      ],
      "name": "toHSLA",
      "longname": "RgbaColor#toHSLA",
      "kind": "function",
      "memberof": "RgbaColor",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001778",
      "___s": true
    },
    {
      "comment": "/**\n   * Returns an rgb string representation of this color.\n   * @return { String } In format rgb(0, 0, 0)\n*/",
      "meta": {
        "range": [
          1776,
          1840
        ],
        "filename": "rgba-color.js",
        "lineno": 87,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100012405",
          "name": "RgbaColor#toRGB",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns an rgb string representation of this color.",
      "returns": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "In format rgb(0, 0, 0)"
        }
      ],
      "name": "toRGB",
      "longname": "RgbaColor#toRGB",
      "kind": "function",
      "memberof": "RgbaColor",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001780",
      "___s": true
    },
    {
      "comment": "/**\n   * Returns an rgba string representation of this color.\n   * @return { String } In format rgb(0, 0, 0, 0)\n   */",
      "meta": {
        "range": [
          1964,
          2006
        ],
        "filename": "rgba-color.js",
        "lineno": 95,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100012424",
          "name": "RgbaColor#toRGBA",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns an rgba string representation of this color.",
      "returns": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "In format rgb(0, 0, 0, 0)"
        }
      ],
      "name": "toRGBA",
      "longname": "RgbaColor#toRGBA",
      "kind": "function",
      "memberof": "RgbaColor",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001781",
      "___s": true
    },
    {
      "comment": "/**\n   * Returns a hex string representation of this color.\n   * @return { String } In format #000000\n   */",
      "meta": {
        "range": [
          2122,
          2226
        ],
        "filename": "rgba-color.js",
        "lineno": 103,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100012433",
          "name": "RgbaColor#toHex",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns a hex string representation of this color.",
      "returns": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "In format #000000"
        }
      ],
      "name": "toHex",
      "longname": "RgbaColor#toHex",
      "kind": "function",
      "memberof": "RgbaColor",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001782",
      "___s": true
    },
    {
      "comment": "/**\n   * Returns an number representation of the color\n   * @return { Number } Unsigned integer in the range 0-16 777 216\n   */",
      "meta": {
        "range": [
          2360,
          2510
        ],
        "filename": "rgba-color.js",
        "lineno": 111,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100012458",
          "name": "RgbaColor#toNumber",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns an number representation of the color",
      "returns": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Unsigned integer in the range 0-16 777 216"
        }
      ],
      "name": "toNumber",
      "longname": "RgbaColor#toNumber",
      "kind": "function",
      "memberof": "RgbaColor",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001783",
      "___s": true
    },
    {
      "comment": "/**\n   * Compares two colors.\n   * @param { RgbaColor } c The color to compare with.\n   * @return { Boolean } True if the rgb channels are the same, false otherwise\n   */",
      "meta": {
        "range": [
          2687,
          2794
        ],
        "filename": "rgba-color.js",
        "lineno": 125,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100012497",
          "name": "RgbaColor#isEqual",
          "type": "MethodDefinition",
          "paramnames": [
            "c"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Compares two colors.",
      "params": [
        {
          "type": {
            "names": [
              "RgbaColor"
            ]
          },
          "description": "The color to compare with.",
          "name": "c"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "True if the rgb channels are the same, false otherwise"
        }
      ],
      "name": "isEqual",
      "longname": "RgbaColor#isEqual",
      "kind": "function",
      "memberof": "RgbaColor",
      "scope": "instance",
      "___id": "T000002R001788",
      "___s": true
    },
    {
      "comment": "/**\n   * convert rgba color to string\n   * @returns { String } In format rgba(0, 0, 0, 0)\n   */",
      "meta": {
        "range": [
          2896,
          2975
        ],
        "filename": "rgba-color.js",
        "lineno": 133,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100012534",
          "name": "RgbaColor#toString",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "convert rgba color to string",
      "returns": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "In format rgba(0, 0, 0, 0)"
        }
      ],
      "name": "toString",
      "longname": "RgbaColor#toString",
      "kind": "function",
      "memberof": "RgbaColor",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001789",
      "___s": true
    },
    {
      "comment": "/**\n   * Checks if this color is perceived as dark.\n   * @return { Boolean } True if the luminance is below 125, false otherwise.\n   */",
      "meta": {
        "range": [
          3117,
          3167
        ],
        "filename": "rgba-color.js",
        "lineno": 141,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100012557",
          "name": "RgbaColor#isDark",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Checks if this color is perceived as dark.",
      "returns": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "True if the luminance is below 125, false otherwise."
        }
      ],
      "name": "isDark",
      "longname": "RgbaColor#isDark",
      "kind": "function",
      "memberof": "RgbaColor",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001790",
      "___s": true
    },
    {
      "comment": "/**\n   * Calculates the perceived luminance of the color.\n   * @return { Number } A value in the range 0-1 where a low value is considered dark and vice versa.\n   */",
      "meta": {
        "range": [
          3339,
          3565
        ],
        "filename": "rgba-color.js",
        "lineno": 149,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100012568",
          "name": "RgbaColor#luminance",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Calculates the perceived luminance of the color.",
      "returns": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "A value in the range 0-1 where a low value is considered dark and vice versa."
        }
      ],
      "name": "luminance",
      "longname": "RgbaColor#luminance",
      "kind": "function",
      "memberof": "RgbaColor",
      "scope": "instance",
      "params": [],
      "___id": "T000002R001791",
      "___s": true
    },
    {
      "comment": "/**\n * @memberof picasso.color\n * @namespace\n * @private\n * @type {Object}\n */",
      "meta": {
        "range": [
          115,
          1924
        ],
        "filename": "utils.js",
        "lineno": 9,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100012623",
          "name": "utils",
          "type": "ObjectExpression",
          "value": "{\"linearGradient\":\"\",\"getContrast\":\"\"}"
        }
      },
      "memberof": "picasso.color",
      "kind": "namespace",
      "access": "private",
      "type": {
        "names": [
          "Object"
        ]
      },
      "name": "utils",
      "longname": "picasso.color.utils",
      "scope": "static",
      "___id": "T000002R001794",
      "___s": true
    },
    {
      "comment": "/**\n   * Takes a collection of colors and constructs a linear-gradient CSS property\n   * @param { String } direction Allowed values are top, bottom, left or right\n   * @param { LinearScale | RgbaColor[] | HslaColor[] | String[] } colors Color scale or Array of colors\n   * @param { Boolean } percentage TRUE if the representation should be in percentage\n     * @returns { String } Full CSS string representation of the linear-gradient property\n     */",
      "meta": {
        "range": [
          581,
          1324
        ],
        "filename": "utils.js",
        "lineno": 17,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100012626",
          "name": "linearGradient",
          "type": "ArrowFunctionExpression"
        },
        "vars": {
          "cssColors": "picasso.color.utils.linearGradient~cssColors",
          "inputDomain": "picasso.color.utils.linearGradient~inputDomain",
          "": null,
          "result": "picasso.color.utils.linearGradient~result",
          "interval": "picasso.color.utils.linearGradient~interval",
          "percent": "picasso.color.utils.linearGradient~percent",
          "i": "picasso.color.utils.linearGradient~i"
        }
      },
      "description": "Takes a collection of colors and constructs a linear-gradient CSS property",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Allowed values are top, bottom, left or right",
          "name": "direction"
        },
        {
          "type": {
            "names": [
              "LinearScale",
              "Array.<RgbaColor>",
              "Array.<HslaColor>",
              "Array.<String>"
            ]
          },
          "description": "Color scale or Array of colors",
          "name": "colors"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "TRUE if the representation should be in percentage",
          "name": "percentage"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Full CSS string representation of the linear-gradient property"
        }
      ],
      "name": "linearGradient",
      "longname": "picasso.color.utils.linearGradient",
      "kind": "function",
      "memberof": "picasso.color.utils",
      "scope": "static",
      "___id": "T000002R001795",
      "___s": true
    },
    {
      "comment": "/**\n   * According to the Web Content Accessibility Guidelines the contrast between background and small text should be at least 4.5 : 1.\n   * @param { RgbaColor | HslaColor | String } c1 Color to be compered\n   * @param { RgbaColor | HslaColor | String } c2 Color to compare with\n   * @return { Number } Contrast ratio between two colors\n   */",
      "meta": {
        "range": [
          1676,
          1922
        ],
        "filename": "utils.js",
        "lineno": 52,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/colors",
        "code": {
          "id": "astnode100012754",
          "name": "getContrast",
          "type": "ArrowFunctionExpression"
        },
        "vars": {
          "c1": "picasso.color.utils.getContrast~c1",
          "c2": "picasso.color.utils.getContrast~c2",
          "l1": "picasso.color.utils.getContrast~l1",
          "l2": "picasso.color.utils.getContrast~l2"
        }
      },
      "description": "According to the Web Content Accessibility Guidelines the contrast between background and small text should be at least 4.5 : 1.",
      "params": [
        {
          "type": {
            "names": [
              "RgbaColor",
              "HslaColor",
              "String"
            ]
          },
          "description": "Color to be compered",
          "name": "c1"
        },
        {
          "type": {
            "names": [
              "RgbaColor",
              "HslaColor",
              "String"
            ]
          },
          "description": "Color to compare with",
          "name": "c2"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Contrast ratio between two colors"
        }
      ],
      "name": "getContrast",
      "longname": "picasso.color.utils.getContrast",
      "kind": "function",
      "memberof": "picasso.color.utils",
      "scope": "static",
      "___id": "T000002R001807",
      "___s": true
    },
    {
      "comment": "/**\n * Factory-function, constructs a new field accessor with default settings\n *\n * @return {Object}   Object with accessors\n */",
      "meta": {
        "range": [
          543,
          2688
        ],
        "filename": "field.js",
        "lineno": 20,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/data",
        "code": {
          "id": "astnode100012856",
          "name": "exports.field",
          "type": "FunctionDeclaration",
          "paramnames": []
        }
      },
      "description": "Factory-function, constructs a new field accessor with default settings",
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Object with accessors"
        }
      ],
      "name": "field",
      "longname": "field",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R001820",
      "___s": true
    },
    {
      "comment": "/**\n   * Get or set the data\n   *\n   * @param  {Object} [d] Data object\n   * @return {Function}   Field object\n   * @return {Object}     Data object\n   */",
      "meta": {
        "range": [
          964,
          1004
        ],
        "filename": "field.js",
        "lineno": 40,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/data",
        "code": {
          "id": "astnode100012895",
          "name": "fn.data",
          "type": "ArrowFunctionExpression",
          "funcscope": "field",
          "paramnames": [
            "d"
          ]
        },
        "vars": {
          "data": "field~fn.data~data"
        }
      },
      "description": "Get or set the data",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Data object",
          "name": "d"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Field object"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Data object"
        }
      ],
      "name": "data",
      "longname": "field~fn.data",
      "kind": "function",
      "memberof": "field~fn",
      "scope": "static",
      "___id": "T000002R001831",
      "___s": true
    },
    {
      "comment": "/**\n   * Get tags from the data or set an accessor for the tags\n   *\n   * @param  {Function} [f] Optional accessor function\n   * @return {Function}     Field object\n   * @return {Object}       Tags\n   */",
      "meta": {
        "range": [
          1215,
          1269
        ],
        "filename": "field.js",
        "lineno": 49,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/data",
        "code": {
          "id": "astnode100012910",
          "name": "fn.tags",
          "type": "ArrowFunctionExpression",
          "funcscope": "field",
          "paramnames": [
            "f"
          ]
        },
        "vars": {
          "acc.tags": "field~acc.tags"
        }
      },
      "description": "Get tags from the data or set an accessor for the tags",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "Optional accessor function",
          "name": "f"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Field object"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Tags"
        }
      ],
      "name": "tags",
      "longname": "field~fn.tags",
      "kind": "function",
      "memberof": "field~fn",
      "scope": "static",
      "___id": "T000002R001833",
      "___s": true
    },
    {
      "comment": "/**\n   * Get the minimum value of the data or set the accessor\n   *\n   * @param  {Function} [f] Optional accessor function\n   * @return {Function}     Field object\n   * @return {Integer}      The minimum value\n   */",
      "meta": {
        "range": [
          1492,
          1543
        ],
        "filename": "field.js",
        "lineno": 58,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/data",
        "code": {
          "id": "astnode100012931",
          "name": "fn.min",
          "type": "ArrowFunctionExpression",
          "funcscope": "field",
          "paramnames": [
            "f"
          ]
        },
        "vars": {
          "acc.min": "field~acc.min"
        }
      },
      "description": "Get the minimum value of the data or set the accessor",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "Optional accessor function",
          "name": "f"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Field object"
        },
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "description": "The minimum value"
        }
      ],
      "name": "min",
      "longname": "field~fn.min",
      "kind": "function",
      "memberof": "field~fn",
      "scope": "static",
      "___id": "T000002R001835",
      "___s": true
    },
    {
      "comment": "/**\n   * Get the maximum value of the data or set the accessor\n   *\n   * @param  {Function} [f] Optional accessor function\n   * @return {Function}     Field object\n   * @return {Integer}      The maximum value\n   */",
      "meta": {
        "range": [
          1766,
          1817
        ],
        "filename": "field.js",
        "lineno": 67,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/data",
        "code": {
          "id": "astnode100012952",
          "name": "fn.max",
          "type": "ArrowFunctionExpression",
          "funcscope": "field",
          "paramnames": [
            "f"
          ]
        },
        "vars": {
          "acc.max": "field~acc.max"
        }
      },
      "description": "Get the maximum value of the data or set the accessor",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "Optional accessor function",
          "name": "f"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Field object"
        },
        {
          "type": {
            "names": [
              "Integer"
            ]
          },
          "description": "The maximum value"
        }
      ],
      "name": "max",
      "longname": "field~fn.max",
      "kind": "function",
      "memberof": "field~fn",
      "scope": "static",
      "___id": "T000002R001837",
      "___s": true
    },
    {
      "comment": "/**\n   * Get the title of the data or set the accessor\n   *\n   * @param  {Function} [f] Optional accessor function\n   * @return {Function}     Field object\n   * @return {String}       Title\n   */",
      "meta": {
        "range": [
          2020,
          2077
        ],
        "filename": "field.js",
        "lineno": 76,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/data",
        "code": {
          "id": "astnode100012973",
          "name": "fn.title",
          "type": "ArrowFunctionExpression",
          "funcscope": "field",
          "paramnames": [
            "f"
          ]
        },
        "vars": {
          "acc.title": "field~acc.title"
        }
      },
      "description": "Get the title of the data or set the accessor",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "Optional accessor function",
          "name": "f"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Field object"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Title"
        }
      ],
      "name": "title",
      "longname": "field~fn.title",
      "kind": "function",
      "memberof": "field~fn",
      "scope": "static",
      "___id": "T000002R001839",
      "___s": true
    },
    {
      "comment": "/**\n   * Get the values of the data or set the accessor\n   *\n   * @param  {Function} [f] Optional accessor function\n   * @return {Function}     Field object\n   * @return {Array}        Array, array of objects or object of values\n   */",
      "meta": {
        "range": [
          2319,
          2379
        ],
        "filename": "field.js",
        "lineno": 85,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/data",
        "code": {
          "id": "astnode100012994",
          "name": "fn.values",
          "type": "ArrowFunctionExpression",
          "funcscope": "field",
          "paramnames": [
            "f"
          ]
        },
        "vars": {
          "acc.values": "field~acc.values"
        }
      },
      "description": "Get the values of the data or set the accessor",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "Optional accessor function",
          "name": "f"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Field object"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Array, array of objects or object of values"
        }
      ],
      "name": "values",
      "longname": "field~fn.values",
      "kind": "function",
      "memberof": "field~fn",
      "scope": "static",
      "___id": "T000002R001841",
      "___s": true
    },
    {
      "comment": "/**\n   * Get the formatted data of the data or set the formatter\n   *\n   * @param  {Function} [f] Optional formatter function\n   * @return {Function}     Field object\n   * @return {String}       Formatted data\n   */",
      "meta": {
        "range": [
          2602,
          2671
        ],
        "filename": "field.js",
        "lineno": 94,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/data",
        "code": {
          "id": "astnode100013015",
          "name": "fn.formatter",
          "type": "ArrowFunctionExpression",
          "funcscope": "field",
          "paramnames": [
            "f"
          ]
        },
        "vars": {
          "acc.formatter": "field~acc.formatter"
        }
      },
      "description": "Get the formatted data of the data or set the formatter",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "Optional formatter function",
          "name": "f"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Field object"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Formatted data"
        }
      ],
      "name": "formatter",
      "longname": "field~fn.formatter",
      "kind": "function",
      "memberof": "field~fn",
      "scope": "static",
      "___id": "T000002R001843",
      "___s": true
    },
    {
      "comment": "/**\n * Resolves the value at the given JSON path\n * @private\n * @param  {String} path [description]\n * @param  {Object} obj  [description]\n * @return {Object}      [description]\n *\n * @example\n * let path = \"/path/to/paradise\";\n * let obj = {\n *   path: {\n *     to: { paradise: \"heaven\"},\n *     from: {...}\n *   }\n * };\n * resolve( path, obj ); // \"heaven\"\n */",
      "meta": {
        "range": [
          363,
          1093
        ],
        "filename": "json-path-resolver.js",
        "lineno": 18,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/data/json-path-mashup",
        "code": {
          "id": "astnode100013092",
          "name": "exports.resolve",
          "type": "FunctionDeclaration",
          "paramnames": [
            "path",
            "obj"
          ]
        }
      },
      "description": "Resolves the value at the given JSON path",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "[description]",
          "name": "path"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "[description]",
          "name": "obj"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "[description]"
        }
      ],
      "examples": [
        "let path = \"/path/to/paradise\";\nlet obj = {\n  path: {\n    to: { paradise: \"heaven\"},\n    from: {...}\n  }\n};\nresolve( path, obj ); // \"heaven\""
      ],
      "name": "resolve",
      "longname": "resolve",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R001850",
      "___s": true
    },
    {
      "comment": "/**\n * Resolves the value at the given JSON path\n * @private\n * @param  {String} path [description]\n * @param  {Object} obj  [description]\n * @return {Object}      [description]\n *\n * @example\n * let path = \"/path/to/paradise\";\n * let obj = {\n *   path: {\n *     to: { paradise: \"heaven\"},\n *     from: {...}\n *   }\n * };\n * resolve( path, obj ); // \"heaven\"\n */",
      "meta": {
        "range": [
          363,
          742
        ],
        "filename": "json-path-resolver.js",
        "lineno": 18,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/data",
        "code": {
          "id": "astnode100013258",
          "name": "exports.resolve",
          "type": "FunctionDeclaration",
          "paramnames": [
            "path",
            "obj"
          ]
        }
      },
      "description": "Resolves the value at the given JSON path",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "[description]",
          "name": "path"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "[description]",
          "name": "obj"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "[description]"
        }
      ],
      "examples": [
        "let path = \"/path/to/paradise\";\nlet obj = {\n  path: {\n    to: { paradise: \"heaven\"},\n    from: {...}\n  }\n};\nresolve( path, obj ); // \"heaven\""
      ],
      "name": "resolve",
      "longname": "resolve",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R001860",
      "___s": true
    },
    {
      "comment": "/**\n   * Format a value according to the specified pattern created at construct\n   *\n   * @param  {Number} value   The number to be formatted\n   * @return {String}         [description]\n   */",
      "meta": {
        "range": [
          324,
          380
        ],
        "filename": "numberFormat.js",
        "lineno": 13,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/formatter/d3",
        "code": {
          "id": "astnode100014646",
          "name": "format",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Format a value according to the specified pattern created at construct",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The number to be formatted",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "[description]"
        }
      ],
      "name": "format",
      "longname": "formatter~format",
      "kind": "function",
      "memberof": "formatter",
      "scope": "inner",
      "___id": "T000002R002005",
      "___s": true
    },
    {
      "comment": "/**\n    * Set the locale for the formatter\n    *\n    * @param  {Object} args   Locale object for formatting\n    * @return {Undefined}      Returns nothing\n    */",
      "meta": {
        "range": [
          549,
          684
        ],
        "filename": "numberFormat.js",
        "lineno": 23,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/formatter/d3",
        "code": {
          "id": "astnode100014655",
          "name": "format.locale",
          "type": "FunctionExpression",
          "funcscope": "formatter",
          "paramnames": [
            "settings"
          ]
        },
        "vars": {
          "locale": "formatter~format.locale~locale",
          "d3format": "formatter~format.locale~d3format"
        }
      },
      "description": "Set the locale for the formatter",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Locale object for formatting",
          "name": "args"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Undefined"
            ]
          },
          "description": "Returns nothing"
        }
      ],
      "name": "locale",
      "longname": "formatter~format.locale",
      "kind": "function",
      "memberof": "formatter~format",
      "scope": "static",
      "___id": "T000002R002006",
      "___s": true
    },
    {
      "comment": "/**\n   * Resets the formatter using format.locale\n   */",
      "meta": {
        "range": [
          747,
          909
        ],
        "filename": "numberFormat.js",
        "lineno": 33,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/formatter/d3",
        "code": {
          "id": "astnode100014678",
          "name": "reset",
          "type": "FunctionDeclaration",
          "paramnames": []
        }
      },
      "description": "Resets the formatter using format.locale",
      "name": "reset",
      "longname": "formatter~reset",
      "kind": "function",
      "memberof": "formatter",
      "scope": "inner",
      "params": [],
      "___id": "T000002R002009",
      "___s": true
    },
    {
      "comment": "/**\n    * Format a value according to a specific pattern\n    * that is not the one specified in the constructor\n    *\n    * @param  {String} p   Pattern\n    * @param  {Number} v   Value\n    * @param  {String} t   Thousand\n    * @param  {String} d   Decimal\n    * @return {String}     Formatted value\n    */",
      "meta": {
        "range": [
          1234,
          1387
        ],
        "filename": "numberFormat.js",
        "lineno": 53,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/formatter/d3",
        "code": {
          "id": "astnode100014706",
          "name": "format.format",
          "type": "FunctionExpression",
          "funcscope": "formatter",
          "paramnames": [
            "p",
            "v",
            "t",
            "d"
          ]
        },
        "vars": {
          "thousand": "formatter~format.format~thousand",
          "decimal": "formatter~format.format~decimal"
        }
      },
      "description": "Format a value according to a specific pattern\nthat is not the one specified in the constructor",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Pattern",
          "name": "p"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Value",
          "name": "v"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Thousand",
          "name": "t"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Decimal",
          "name": "d"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Formatted value"
        }
      ],
      "name": "format",
      "longname": "formatter~format.format",
      "kind": "function",
      "memberof": "formatter~format",
      "scope": "static",
      "___id": "T000002R002014",
      "___s": true
    },
    {
      "comment": "/**\n   * Change the pattern on existing formatter\n   *\n   * @param  {String} p     Pattern (optional)\n   * @return {String}       Returns the pattern\n   */",
      "meta": {
        "range": [
          1551,
          1679
        ],
        "filename": "numberFormat.js",
        "lineno": 68,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/formatter/d3",
        "code": {
          "id": "astnode100014741",
          "name": "format.pattern",
          "type": "FunctionExpression",
          "funcscope": "formatter",
          "paramnames": [
            "p"
          ]
        },
        "vars": {
          "pattern": "formatter~format.pattern~pattern",
          "d3format": "formatter~format.pattern~d3format"
        }
      },
      "description": "Change the pattern on existing formatter",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Pattern (optional)",
          "name": "p"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Returns the pattern"
        }
      ],
      "name": "pattern",
      "longname": "formatter~format.pattern",
      "kind": "function",
      "memberof": "formatter~format",
      "scope": "static",
      "___id": "T000002R002017",
      "___s": true
    },
    {
      "comment": "/**\n   * Format a value according to the specified pattern created at construct\n   *\n   * @param  {Date} value   The number to be formatted\n   * @return {String}         [description]\n   */",
      "meta": {
        "range": [
          861,
          917
        ],
        "filename": "timeFormat.js",
        "lineno": 23,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/formatter/d3",
        "code": {
          "id": "astnode100014847",
          "name": "format",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Format a value according to the specified pattern created at construct",
      "params": [
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "description": "The number to be formatted",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "[description]"
        }
      ],
      "name": "format",
      "longname": "formatter~format",
      "kind": "function",
      "memberof": "formatter",
      "scope": "inner",
      "___id": "T000002R002032",
      "___s": true
    },
    {
      "comment": "/**\n    * Format a value according to a specific pattern\n    * that is not the one specified in the constructor\n    *\n    * @param  {String} p   Pattern\n    * @param  {Date} v   Value\n    * @return {String}     Formatted value\n    */",
      "meta": {
        "range": [
          1158,
          1227
        ],
        "filename": "timeFormat.js",
        "lineno": 35,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/formatter/d3",
        "code": {
          "id": "astnode100014856",
          "name": "format.format",
          "type": "FunctionExpression",
          "funcscope": "formatter",
          "paramnames": [
            "p",
            "v"
          ]
        }
      },
      "description": "Format a value according to a specific pattern\nthat is not the one specified in the constructor",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Pattern",
          "name": "p"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "description": "Value",
          "name": "v"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Formatted value"
        }
      ],
      "name": "format",
      "longname": "formatter~format.format",
      "kind": "function",
      "memberof": "formatter~format",
      "scope": "static",
      "___id": "T000002R002033",
      "___s": true
    },
    {
      "comment": "/**\n   * Set the locale for the formatter\n   *\n   * @param  {Object} args   Locale object for formatting\n   * @return {Undefined}      Returns nothing\n   */",
      "meta": {
        "range": [
          1391,
          1528
        ],
        "filename": "timeFormat.js",
        "lineno": 45,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/formatter/d3",
        "code": {
          "id": "astnode100014873",
          "name": "format.locale",
          "type": "FunctionExpression",
          "funcscope": "formatter",
          "paramnames": [
            "args"
          ]
        },
        "vars": {
          "locale": "formatter~format.locale~locale",
          "d3format": "formatter~format.locale~d3format"
        }
      },
      "description": "Set the locale for the formatter",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Locale object for formatting",
          "name": "args"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Undefined"
            ]
          },
          "description": "Returns nothing"
        }
      ],
      "name": "locale",
      "longname": "formatter~format.locale",
      "kind": "function",
      "memberof": "formatter~format",
      "scope": "static",
      "___id": "T000002R002034",
      "___s": true
    },
    {
      "comment": "/**\n   * Parse a string to a date according to a pattern\n   *\n   * @param  {String} p   Pattern\n   * @param  {String} v   Value\n   * @return {Date}     Date\n   */",
      "meta": {
        "range": [
          1698,
          1765
        ],
        "filename": "timeFormat.js",
        "lineno": 59,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/formatter/d3",
        "code": {
          "id": "astnode100014899",
          "name": "format.parse",
          "type": "FunctionExpression",
          "funcscope": "formatter",
          "paramnames": [
            "p",
            "v"
          ]
        }
      },
      "description": "Parse a string to a date according to a pattern",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Pattern",
          "name": "p"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Value",
          "name": "v"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "description": "Date"
        }
      ],
      "name": "parse",
      "longname": "formatter~format.parse",
      "kind": "function",
      "memberof": "formatter~format",
      "scope": "static",
      "___id": "T000002R002037",
      "___s": true
    },
    {
      "comment": "/**\n   * Returns a parser that parses strings to date according to the pattern\n   *\n   * @param  {String} p   Pattern\n   * @return {Function}   Parser\n   */",
      "meta": {
        "range": [
          1929,
          1997
        ],
        "filename": "timeFormat.js",
        "lineno": 69,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/formatter/d3",
        "code": {
          "id": "astnode100014916",
          "name": "format.parsePattern",
          "type": "FunctionExpression",
          "funcscope": "formatter",
          "paramnames": [
            "p"
          ]
        }
      },
      "description": "Returns a parser that parses strings to date according to the pattern",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Pattern",
          "name": "p"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Parser"
        }
      ],
      "name": "parsePattern",
      "longname": "formatter~format.parsePattern",
      "kind": "function",
      "memberof": "formatter~format",
      "scope": "static",
      "___id": "T000002R002038",
      "___s": true
    },
    {
      "comment": "/**\n   * Creates a matrix with identity values.\n   * @private\n   */",
      "meta": {
        "range": [
          87,
          209
        ],
        "filename": "matrix.js",
        "lineno": 6,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/math",
        "code": {
          "id": "astnode100015337",
          "name": "Matrix",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a matrix with identity values.",
      "access": "private",
      "name": "Matrix",
      "longname": "Matrix",
      "kind": "class",
      "scope": "global",
      "params": [],
      "___id": "T000002R002090",
      "___s": true
    },
    {
      "comment": "/**\n   * Creates a new matrix with a copy of the current values.\n   */",
      "meta": {
        "range": [
          286,
          358
        ],
        "filename": "matrix.js",
        "lineno": 19,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/math",
        "code": {
          "id": "astnode100015365",
          "name": "Matrix#clone",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new matrix with a copy of the current values.",
      "name": "clone",
      "longname": "Matrix#clone",
      "kind": "function",
      "memberof": "Matrix",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002093",
      "___s": true
    },
    {
      "comment": "/**\n  * Sets the matrix values\n  * @param {Number[][]} arr A 3x3 array.\n  */",
      "meta": {
        "range": [
          441,
          498
        ],
        "filename": "matrix.js",
        "lineno": 28,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/math",
        "code": {
          "id": "astnode100015380",
          "name": "Matrix#set",
          "type": "MethodDefinition",
          "paramnames": [
            "arr"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Sets the matrix values",
      "params": [
        {
          "type": {
            "names": [
              "Array.<Array.<Number>>"
            ]
          },
          "description": "A 3x3 array.",
          "name": "arr"
        }
      ],
      "name": "set",
      "longname": "Matrix#set",
      "kind": "function",
      "memberof": "Matrix",
      "scope": "instance",
      "___id": "T000002R002095",
      "___s": true
    },
    {
      "comment": "/**\n  * Saves the current matrix values to a stack.\n  */",
      "meta": {
        "range": [
          561,
          627
        ],
        "filename": "matrix.js",
        "lineno": 36,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/math",
        "code": {
          "id": "astnode100015393",
          "name": "Matrix#save",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Saves the current matrix values to a stack.",
      "name": "save",
      "longname": "Matrix#save",
      "kind": "function",
      "memberof": "Matrix",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002097",
      "___s": true
    },
    {
      "comment": "/**\n  * Sets the current matrix values to the last ones saved on to the stack.\n  */",
      "meta": {
        "range": [
          717,
          856
        ],
        "filename": "matrix.js",
        "lineno": 44,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/math",
        "code": {
          "id": "astnode100015409",
          "name": "Matrix#restore",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Sets the current matrix values to the last ones saved on to the stack.",
      "name": "restore",
      "longname": "Matrix#restore",
      "kind": "function",
      "memberof": "Matrix",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002098",
      "___s": true
    },
    {
      "comment": "/**\n  * Adds a scalar value to each element in the matrix.\n  * @param {Number} value\n  */",
      "meta": {
        "range": [
          952,
          1180
        ],
        "filename": "matrix.js",
        "lineno": 55,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/math",
        "code": {
          "id": "astnode100015433",
          "name": "Matrix#add",
          "type": "MethodDefinition",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Adds a scalar value to each element in the matrix.",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "name": "value"
        }
      ],
      "name": "add",
      "longname": "Matrix#add",
      "kind": "function",
      "memberof": "Matrix",
      "scope": "instance",
      "___id": "T000002R002100",
      "___s": true
    },
    {
      "comment": "/**\n  * Translates the current matrix along the x and y axis.\n  * @param {Number} x\n  * @param {Number} y\n  */",
      "meta": {
        "range": [
          1297,
          1389
        ],
        "filename": "matrix.js",
        "lineno": 71,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/math",
        "code": {
          "id": "astnode100015485",
          "name": "Matrix#translate",
          "type": "MethodDefinition",
          "paramnames": [
            "x",
            "y"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Translates the current matrix along the x and y axis.",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "name": "x"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "name": "y"
        }
      ],
      "name": "translate",
      "longname": "Matrix#translate",
      "kind": "function",
      "memberof": "Matrix",
      "scope": "instance",
      "___id": "T000002R002106",
      "___s": true
    },
    {
      "comment": "/**\n  * Rotates the current matrix.\n  * @param {Number} radianAngle Angle in radians.\n  */",
      "meta": {
        "range": [
          1486,
          1665
        ],
        "filename": "matrix.js",
        "lineno": 80,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/math",
        "code": {
          "id": "astnode100015511",
          "name": "Matrix#rotate",
          "type": "MethodDefinition",
          "paramnames": [
            "radianAngle"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Rotates the current matrix.",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Angle in radians.",
          "name": "radianAngle"
        }
      ],
      "name": "rotate",
      "longname": "Matrix#rotate",
      "kind": "function",
      "memberof": "Matrix",
      "scope": "instance",
      "___id": "T000002R002107",
      "___s": true
    },
    {
      "comment": "/**\n  *\n  * If value is a number; multiplies each element in the matrix by the given value.\n  * If value is a matrix; multiplies the two matrices.\n  * @param {Number|Array|Matrix} value\n  */",
      "meta": {
        "range": [
          1862,
          2652
        ],
        "filename": "matrix.js",
        "lineno": 93,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/math",
        "code": {
          "id": "astnode100015554",
          "name": "Matrix#multiply",
          "type": "MethodDefinition",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "If value is a number; multiplies each element in the matrix by the given value.\nIf value is a matrix; multiplies the two matrices.",
      "params": [
        {
          "type": {
            "names": [
              "Number",
              "Array",
              "Matrix"
            ]
          },
          "name": "value"
        }
      ],
      "name": "multiply",
      "longname": "Matrix#multiply",
      "kind": "function",
      "memberof": "Matrix",
      "scope": "instance",
      "___id": "T000002R002110",
      "___s": true
    },
    {
      "comment": "/**\n  * Scales the matrix along x and y axis.\n  * @param {Number} x The value to scale the matrix with along the x direction\n  * @param {Number} [y=x] The value to scale the matrix with along the y direction.\n  */",
      "meta": {
        "range": [
          2872,
          3054
        ],
        "filename": "matrix.js",
        "lineno": 130,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/math",
        "code": {
          "id": "astnode100015711",
          "name": "Matrix#scale",
          "type": "MethodDefinition",
          "paramnames": [
            "x",
            "y"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Scales the matrix along x and y axis.",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The value to scale the matrix with along the x direction",
          "name": "x"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": "x",
          "description": "The value to scale the matrix with along the y direction.",
          "name": "y"
        }
      ],
      "name": "scale",
      "longname": "Matrix#scale",
      "kind": "function",
      "memberof": "Matrix",
      "scope": "instance",
      "___id": "T000002R002125",
      "___s": true
    },
    {
      "comment": "/**\n   * Multiples the matrix with the supplied transformation values\n   * @param {Number} a Horizontal scaling\n   * @param {Number} b Horizontal skewing\n   * @param {Number} c Vertical skewing\n   * @param {Number} d Vertical scaling\n   * @param {Number} e Horizontal moving\n   * @param {Number} f Vertical scaling\n   */",
      "meta": {
        "range": [
          3381,
          3486
        ],
        "filename": "matrix.js",
        "lineno": 148,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/math",
        "code": {
          "id": "astnode100015739",
          "name": "Matrix#transform",
          "type": "MethodDefinition",
          "paramnames": [
            "a",
            "b",
            "c",
            "d",
            "e",
            "f"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Multiples the matrix with the supplied transformation values",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Horizontal scaling",
          "name": "a"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Horizontal skewing",
          "name": "b"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Vertical skewing",
          "name": "c"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Vertical scaling",
          "name": "d"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Horizontal moving",
          "name": "e"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Vertical scaling",
          "name": "f"
        }
      ],
      "name": "transform",
      "longname": "Matrix#transform",
      "kind": "function",
      "memberof": "Matrix",
      "scope": "instance",
      "___id": "T000002R002126",
      "___s": true
    },
    {
      "comment": "/**\n  * Gets the value of the determinant.\n  * @return {Number}\n  */",
      "meta": {
        "range": [
          3561,
          3992
        ],
        "filename": "matrix.js",
        "lineno": 158,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/math",
        "code": {
          "id": "astnode100015769",
          "name": "Matrix#determinant",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Gets the value of the determinant.",
      "returns": [
        {
          "type": {
            "names": [
              "Number"
            ]
          }
        }
      ],
      "name": "determinant",
      "longname": "Matrix#determinant",
      "kind": "function",
      "memberof": "Matrix",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002127",
      "___s": true
    },
    {
      "comment": "/**\n  * Inverts the matrix.\n  */",
      "meta": {
        "range": [
          4031,
          4669
        ],
        "filename": "matrix.js",
        "lineno": 178,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/math",
        "code": {
          "id": "astnode100015898",
          "name": "Matrix#invert",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Inverts the matrix.",
      "name": "invert",
      "longname": "Matrix#invert",
      "kind": "function",
      "memberof": "Matrix",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002139",
      "___s": true
    },
    {
      "comment": "/**\n  * Transposes the elements of the matrix.\n  */",
      "meta": {
        "range": [
          4727,
          4945
        ],
        "filename": "matrix.js",
        "lineno": 203,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/math",
        "code": {
          "id": "astnode100016072",
          "name": "Matrix#transpose",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Transposes the elements of the matrix.",
      "name": "transpose",
      "longname": "Matrix#transpose",
      "kind": "function",
      "memberof": "Matrix",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002151",
      "___s": true
    },
    {
      "comment": "/**\n  * Resets the inner elements of the matrix to identity values.\n  */",
      "meta": {
        "range": [
          5024,
          5137
        ],
        "filename": "matrix.js",
        "lineno": 216,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/math",
        "code": {
          "id": "astnode100016142",
          "name": "Matrix#identity",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Resets the inner elements of the matrix to identity values.",
      "name": "identity",
      "longname": "Matrix#identity",
      "kind": "function",
      "memberof": "Matrix",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002154",
      "___s": true
    },
    {
      "comment": "/**\n   * Transforms the given point by this matrix and returns a new point\n   */",
      "meta": {
        "range": [
          5536,
          5857
        ],
        "filename": "matrix.js",
        "lineno": 239,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/math",
        "code": {
          "id": "astnode100016273",
          "name": "Matrix#transformPoint",
          "type": "MethodDefinition",
          "paramnames": [
            "p"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Transforms the given point by this matrix and returns a new point",
      "name": "transformPoint",
      "longname": "Matrix#transformPoint",
      "kind": "function",
      "memberof": "Matrix",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002159",
      "___s": true
    },
    {
      "comment": "/**\n   * Transforms the given points by this matrix and returns the new points\n   */",
      "meta": {
        "range": [
          5948,
          6412
        ],
        "filename": "matrix.js",
        "lineno": 257,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/math",
        "code": {
          "id": "astnode100016358",
          "name": "Matrix#transformPoints",
          "type": "MethodDefinition",
          "paramnames": [
            "array"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Transforms the given points by this matrix and returns the new points",
      "name": "transformPoints",
      "longname": "Matrix#transformPoints",
      "kind": "function",
      "memberof": "Matrix",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002170",
      "___s": true
    },
    {
      "comment": "/**\n   * Class representing a BandScale\n   * @private\n   * @param { Object[] } [ domain=[] ] The domain values\n   * @param { Number[] } [ range=[] ] The range values\n   */",
      "meta": {
        "range": [
          278,
          399
        ],
        "filename": "band.js",
        "lineno": 11,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100016697",
          "name": "BandScale",
          "type": "MethodDefinition",
          "paramnames": [
            "domain",
            "range"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Class representing a BandScale",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array.<Object>"
            ]
          },
          "optional": true,
          "defaultvalue": "[]",
          "description": "The domain values",
          "name": "domain"
        },
        {
          "type": {
            "names": [
              "Array.<Number>"
            ]
          },
          "optional": true,
          "defaultvalue": "[]",
          "description": "The range values",
          "name": "range"
        }
      ],
      "name": "BandScale",
      "longname": "BandScale",
      "kind": "class",
      "scope": "global",
      "___id": "T000002R002200",
      "___s": true
    },
    {
      "comment": "/**\n   * @param { Object[] } [values] Set or Get domain values\n   * @return { BandScale | Object[] } The instance this method was called on if a parameter is provided, otherwise the current domain is returned\n   */",
      "meta": {
        "range": [
          620,
          788
        ],
        "filename": "band.js",
        "lineno": 21,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100016726",
          "name": "BandScale#domain",
          "type": "MethodDefinition",
          "paramnames": [
            "values"
          ]
        },
        "vars": {
          "": null
        }
      },
      "params": [
        {
          "type": {
            "names": [
              "Array.<Object>"
            ]
          },
          "optional": true,
          "description": "Set or Get domain values",
          "name": "values"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "BandScale",
              "Array.<Object>"
            ]
          },
          "description": "The instance this method was called on if a parameter is provided, otherwise the current domain is returned"
        }
      ],
      "name": "domain",
      "longname": "BandScale#domain",
      "kind": "function",
      "memberof": "BandScale",
      "scope": "instance",
      "___id": "T000002R002202",
      "___s": true
    },
    {
      "comment": "/**\n   * @param { Number[] } [values] Set or Get range values\n   * @return { BandScale | Number[] } The instance this method was called on if a parameter is provided, otherwise the current range is returned\n   */",
      "meta": {
        "range": [
          1007,
          1172
        ],
        "filename": "band.js",
        "lineno": 34,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100016759",
          "name": "BandScale#range",
          "type": "MethodDefinition",
          "paramnames": [
            "values"
          ]
        },
        "vars": {
          "": null
        }
      },
      "params": [
        {
          "type": {
            "names": [
              "Array.<Number>"
            ]
          },
          "optional": true,
          "description": "Set or Get range values",
          "name": "values"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "BandScale",
              "Array.<Number>"
            ]
          },
          "description": "The instance this method was called on if a parameter is provided, otherwise the current range is returned"
        }
      ],
      "name": "range",
      "longname": "BandScale#range",
      "kind": "function",
      "memberof": "BandScale",
      "scope": "instance",
      "___id": "T000002R002203",
      "___s": true
    },
    {
      "comment": "/**\n   * {@link https://github.com/d3/d3-scale#band_paddingOuter }\n   * @param { Number } value A value within 0-1\n   * @return { BandScale } The instance this method was called on\n   */",
      "meta": {
        "range": [
          1365,
          1478
        ],
        "filename": "band.js",
        "lineno": 48,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100016792",
          "name": "BandScale#paddingOuter",
          "type": "MethodDefinition",
          "paramnames": [
            "padding"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "{@link https://github.com/d3/d3-scale#band_paddingOuter }",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "A value within 0-1",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "BandScale"
            ]
          },
          "description": "The instance this method was called on"
        }
      ],
      "name": "paddingOuter",
      "longname": "BandScale#paddingOuter",
      "kind": "function",
      "memberof": "BandScale",
      "scope": "instance",
      "___id": "T000002R002204",
      "___s": true
    },
    {
      "comment": "/**\n   * {@link https://github.com/d3/d3-scale#band_paddingInner }\n   * @param { Number } value A value within 0-1\n   * @return { BandScale } The instance this method was called on\n   */",
      "meta": {
        "range": [
          1671,
          1784
        ],
        "filename": "band.js",
        "lineno": 59,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100016815",
          "name": "BandScale#paddingInner",
          "type": "MethodDefinition",
          "paramnames": [
            "padding"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "{@link https://github.com/d3/d3-scale#band_paddingInner }",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "A value within 0-1",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "BandScale"
            ]
          },
          "description": "The instance this method was called on"
        }
      ],
      "name": "paddingInner",
      "longname": "BandScale#paddingInner",
      "kind": "function",
      "memberof": "BandScale",
      "scope": "instance",
      "___id": "T000002R002205",
      "___s": true
    },
    {
      "comment": "/**\n   * {@link https://github.com/d3/d3-scale#band_padding }\n   * @param { Number } value A value within 0-1\n   * @return { BandScale } The instance this method was called on\n   */",
      "meta": {
        "range": [
          1972,
          2075
        ],
        "filename": "band.js",
        "lineno": 70,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100016838",
          "name": "BandScale#padding",
          "type": "MethodDefinition",
          "paramnames": [
            "padding"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "{@link https://github.com/d3/d3-scale#band_padding }",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "A value within 0-1",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "BandScale"
            ]
          },
          "description": "The instance this method was called on"
        }
      ],
      "name": "padding",
      "longname": "BandScale#padding",
      "kind": "function",
      "memberof": "BandScale",
      "scope": "instance",
      "___id": "T000002R002206",
      "___s": true
    },
    {
      "comment": "/**\n   * {@link https://github.com/d3/d3-scale#band_padding }\n   * @param { Number } value A value within 0-1\n   * @return { BandScale } The instance this method was called on\n   */",
      "meta": {
        "range": [
          2263,
          2354
        ],
        "filename": "band.js",
        "lineno": 81,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100016861",
          "name": "BandScale#align",
          "type": "MethodDefinition",
          "paramnames": [
            "align"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "{@link https://github.com/d3/d3-scale#band_padding }",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "A value within 0-1",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "BandScale"
            ]
          },
          "description": "The instance this method was called on"
        }
      ],
      "name": "align",
      "longname": "BandScale#align",
      "kind": "function",
      "memberof": "BandScale",
      "scope": "instance",
      "___id": "T000002R002207",
      "___s": true
    },
    {
      "comment": "/**\n   * {@link https://github.com/d3/d3-scale#band_align }\n   * @return { Number } Bandwith of each band\n   */",
      "meta": {
        "range": [
          2472,
          2525
        ],
        "filename": "band.js",
        "lineno": 91,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100016882",
          "name": "BandScale#bandWidth",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "{@link https://github.com/d3/d3-scale#band_align }",
      "returns": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Bandwith of each band"
        }
      ],
      "name": "bandWidth",
      "longname": "BandScale#bandWidth",
      "kind": "function",
      "memberof": "BandScale",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002208",
      "___s": true
    },
    {
      "comment": "/**\n   * {@link https://github.com/d3/d3-scale#band_step }\n   * @return { Number } Step distance\n   */",
      "meta": {
        "range": [
          2634,
          2677
        ],
        "filename": "band.js",
        "lineno": 99,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100016893",
          "name": "BandScale#step",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "{@link https://github.com/d3/d3-scale#band_step }",
      "returns": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Step distance"
        }
      ],
      "name": "step",
      "longname": "BandScale#step",
      "kind": "function",
      "memberof": "BandScale",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002209",
      "___s": true
    },
    {
      "comment": "/**\n   * {@link https://github.com/d3/d3-scale#_band }\n   * @param { Object } value\n   * @return { Number }\n   */",
      "meta": {
        "range": [
          2797,
          2844
        ],
        "filename": "band.js",
        "lineno": 108,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100016904",
          "name": "BandScale#get",
          "type": "MethodDefinition",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "{@link https://github.com/d3/d3-scale#_band }",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Number"
            ]
          }
        }
      ],
      "name": "get",
      "longname": "BandScale#get",
      "kind": "function",
      "memberof": "BandScale",
      "scope": "instance",
      "___id": "T000002R002210",
      "___s": true
    },
    {
      "comment": "/**\n   * Get the first value of the domain\n   * @return { Number }\n   */",
      "meta": {
        "range": [
          2923,
          2969
        ],
        "filename": "band.js",
        "lineno": 116,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100016915",
          "name": "BandScale#start",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the first value of the domain",
      "returns": [
        {
          "type": {
            "names": [
              "Number"
            ]
          }
        }
      ],
      "name": "start",
      "longname": "BandScale#start",
      "kind": "member",
      "memberof": "BandScale",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002211",
      "___s": true
    },
    {
      "comment": "/**\n   * Get the last value of the domain\n   * @return { Number }\n   */",
      "meta": {
        "range": [
          3047,
          3114
        ],
        "filename": "band.js",
        "lineno": 124,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100016926",
          "name": "BandScale#end",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the last value of the domain",
      "returns": [
        {
          "type": {
            "names": [
              "Number"
            ]
          }
        }
      ],
      "name": "end",
      "longname": "BandScale#end",
      "kind": "member",
      "memberof": "BandScale",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002212",
      "___s": true
    },
    {
      "comment": "/**\n * BandScale instantiator\n * @private\n * @param { Object[] } [ domain=[] ] The domain values\n * @param { Number[] } [ range=[] ] The range values\n * @return { BandScale } BandScale instance\n */",
      "meta": {
        "range": [
          3352,
          3412
        ],
        "filename": "band.js",
        "lineno": 138,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100016952",
          "name": "exports.band",
          "type": "FunctionDeclaration",
          "paramnames": [
            "a"
          ]
        }
      },
      "description": "BandScale instantiator",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array.<Object>"
            ]
          },
          "optional": true,
          "defaultvalue": "[]",
          "description": "The domain values",
          "name": "domain"
        },
        {
          "type": {
            "names": [
              "Array.<Number>"
            ]
          },
          "optional": true,
          "defaultvalue": "[]",
          "description": "The range values",
          "name": "range"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "BandScale"
            ]
          },
          "description": "BandScale instance"
        }
      ],
      "name": "band",
      "longname": "band",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R002213",
      "___s": true
    },
    {
      "comment": "/**\n   * Interpolate two colors\n   * @private\n   * @param  {object} from The color to interpolate from\n   * @param  {object} to   The color to interpolate to\n   * @param  {Number} t    A number between [0-1]\n   * @return {object}      The interpolated color\n   */",
      "meta": {
        "range": [
          342,
          423
        ],
        "filename": "color.js",
        "lineno": 12,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales/interpolators",
        "code": {
          "id": "astnode100016972",
          "name": "interpolate",
          "type": "FunctionExpression"
        }
      },
      "description": "Interpolate two colors",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "The color to interpolate from",
          "name": "from"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "The color to interpolate to",
          "name": "to"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "A number between [0-1]",
          "name": "t"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "The interpolated color"
        }
      ],
      "name": "interpolate",
      "longname": "module.exports.interpolate",
      "kind": "function",
      "memberof": "module.exports",
      "scope": "static",
      "___id": "T000002R002217",
      "___s": true
    },
    {
      "comment": "/**\n   * Linearly interpolate two numbers\n   * @private\n   * @param  {Number} from Start value\n   * @param  {Number} to   End value\n   * @param  {Number} t    The weight\n   * @return {Number}      The interpolated value\n   * @example\n   * interpolate( 10, 20, 0.2 ); // 12\n   */",
      "meta": {
        "range": [
          300,
          370
        ],
        "filename": "numeric.js",
        "lineno": 12,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales/interpolators",
        "code": {
          "id": "astnode100016989",
          "name": "interpolate",
          "type": "FunctionExpression"
        }
      },
      "description": "Linearly interpolate two numbers",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Start value",
          "name": "from"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "End value",
          "name": "to"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The weight",
          "name": "t"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The interpolated value"
        }
      ],
      "examples": [
        "interpolate( 10, 20, 0.2 ); // 12"
      ],
      "name": "interpolate",
      "longname": "module.exports.interpolate",
      "kind": "function",
      "memberof": "module.exports",
      "scope": "static",
      "___id": "T000002R002219",
      "___s": true
    },
    {
      "comment": "/**\n   * Class representing a linear scale\n   * @private\n   * @param { Number[] } [ domain=[0,1] ] The domain values\n   * @param { Number[] } [ range=[0,1] ] The range values\n   */",
      "meta": {
        "range": [
          400,
          531
        ],
        "filename": "linear.js",
        "lineno": 15,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100017035",
          "name": "LinearScale",
          "type": "MethodDefinition",
          "paramnames": [
            "domain",
            "range"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Class representing a linear scale",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array.<Number>"
            ]
          },
          "optional": true,
          "defaultvalue": "[0,1]",
          "description": "The domain values",
          "name": "domain"
        },
        {
          "type": {
            "names": [
              "Array.<Number>"
            ]
          },
          "optional": true,
          "defaultvalue": "[0,1]",
          "description": "The range values",
          "name": "range"
        }
      ],
      "name": "LinearScale",
      "longname": "LinearScale",
      "kind": "class",
      "scope": "global",
      "___id": "T000002R002222",
      "___s": true
    },
    {
      "comment": "/**\n   * {@link https://github.com/d3/d3-scale#continuous_invert }\n   * @param { Number } value The inverted value\n   * @return { Number } The inverted value\n   */",
      "meta": {
        "range": [
          701,
          758
        ],
        "filename": "linear.js",
        "lineno": 26,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100017068",
          "name": "LinearScale#invert",
          "type": "MethodDefinition",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "{@link https://github.com/d3/d3-scale#continuous_invert }",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The inverted value",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The inverted value"
        }
      ],
      "name": "invert",
      "longname": "LinearScale#invert",
      "kind": "function",
      "memberof": "LinearScale",
      "scope": "instance",
      "___id": "T000002R002224",
      "___s": true
    },
    {
      "comment": "/**\n   * {@link https://github.com/d3/d3-scale#continuous_rangeRound }\n   * @param { Number[] } values Range values\n   * @return { LinearScale } The instance this method was called on\n   */",
      "meta": {
        "range": [
          954,
          1057
        ],
        "filename": "linear.js",
        "lineno": 35,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100017081",
          "name": "LinearScale#rangeRound",
          "type": "MethodDefinition",
          "paramnames": [
            "values"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "{@link https://github.com/d3/d3-scale#continuous_rangeRound }",
      "params": [
        {
          "type": {
            "names": [
              "Array.<Number>"
            ]
          },
          "description": "Range values",
          "name": "values"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "LinearScale"
            ]
          },
          "description": "The instance this method was called on"
        }
      ],
      "name": "rangeRound",
      "longname": "LinearScale#rangeRound",
      "kind": "function",
      "memberof": "LinearScale",
      "scope": "instance",
      "___id": "T000002R002225",
      "___s": true
    },
    {
      "comment": "/**\n   * {@link https://github.com/d3/d3-scale#continuous_clamp }\n   * @param { Boolean } [ value=true ] TRUE if clamping should be enabled\n   * @return { LinearScale } The instance this method was called on\n   */",
      "meta": {
        "range": [
          1277,
          1375
        ],
        "filename": "linear.js",
        "lineno": 46,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100017102",
          "name": "LinearScale#clamp",
          "type": "MethodDefinition",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "{@link https://github.com/d3/d3-scale#continuous_clamp }",
      "params": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": true,
          "description": "TRUE if clamping should be enabled",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "LinearScale"
            ]
          },
          "description": "The instance this method was called on"
        }
      ],
      "name": "clamp",
      "longname": "LinearScale#clamp",
      "kind": "function",
      "memberof": "LinearScale",
      "scope": "instance",
      "___id": "T000002R002226",
      "___s": true
    },
    {
      "comment": "/**\n   * {@link https://github.com/d3/d3-scale#continuous_ticks }\n   * @param { Object } input Number of ticks to generate or an object passed to tick generator\n   * @return { Number[] | Object } Array of ticks or any type the custom tick generator returns\n   */",
      "meta": {
        "range": [
          1644,
          1810
        ],
        "filename": "linear.js",
        "lineno": 57,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100017125",
          "name": "LinearScale#ticks",
          "type": "MethodDefinition",
          "paramnames": [
            "input"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "{@link https://github.com/d3/d3-scale#continuous_ticks }",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Number of ticks to generate or an object passed to tick generator",
          "name": "input"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<Number>",
              "Object"
            ]
          },
          "description": "Array of ticks or any type the custom tick generator returns"
        }
      ],
      "name": "ticks",
      "longname": "LinearScale#ticks",
      "kind": "function",
      "memberof": "LinearScale",
      "scope": "instance",
      "___id": "T000002R002227",
      "___s": true
    },
    {
      "comment": "/**\n   * {@link https://github.com/d3/d3-scale#continuous_nice }\n   * @param { Number } count\n   * @return { LinearScale } The instance this method was called on\n   */",
      "meta": {
        "range": [
          1984,
          2073
        ],
        "filename": "linear.js",
        "lineno": 69,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100017155",
          "name": "LinearScale#nice",
          "type": "MethodDefinition",
          "paramnames": [
            "count"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "{@link https://github.com/d3/d3-scale#continuous_nice }",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "name": "count"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "LinearScale"
            ]
          },
          "description": "The instance this method was called on"
        }
      ],
      "name": "nice",
      "longname": "LinearScale#nice",
      "kind": "function",
      "memberof": "LinearScale",
      "scope": "instance",
      "___id": "T000002R002228",
      "___s": true
    },
    {
      "comment": "/**\n   * @param { Number[] } [values] Set or Get domain values\n   * @return { LinearScale | Number[] } The instance this method was called on if a parameter is provided, otherwise the current domain is returned\n   */",
      "meta": {
        "range": [
          2487,
          2655
        ],
        "filename": "linear.js",
        "lineno": 89,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100017204",
          "name": "LinearScale#domain",
          "type": "MethodDefinition",
          "paramnames": [
            "values"
          ]
        },
        "vars": {
          "": null
        }
      },
      "params": [
        {
          "type": {
            "names": [
              "Array.<Number>"
            ]
          },
          "optional": true,
          "description": "Set or Get domain values",
          "name": "values"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "LinearScale",
              "Array.<Number>"
            ]
          },
          "description": "The instance this method was called on if a parameter is provided, otherwise the current domain is returned"
        }
      ],
      "name": "domain",
      "longname": "LinearScale#domain",
      "kind": "function",
      "memberof": "LinearScale",
      "scope": "instance",
      "___id": "T000002R002231",
      "___s": true
    },
    {
      "comment": "/**\n   * @param { Number[] } [values] Set or Get range values\n   * @return { LinearScale | Number[] } The instance this method was called on if a parameter is provided, otherwise the current range is returned\n   */",
      "meta": {
        "range": [
          2876,
          3041
        ],
        "filename": "linear.js",
        "lineno": 102,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100017237",
          "name": "LinearScale#range",
          "type": "MethodDefinition",
          "paramnames": [
            "values"
          ]
        },
        "vars": {
          "": null
        }
      },
      "params": [
        {
          "type": {
            "names": [
              "Array.<Number>"
            ]
          },
          "optional": true,
          "description": "Set or Get range values",
          "name": "values"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "LinearScale",
              "Array.<Number>"
            ]
          },
          "description": "The instance this method was called on if a parameter is provided, otherwise the current range is returned"
        }
      ],
      "name": "range",
      "longname": "LinearScale#range",
      "kind": "function",
      "memberof": "LinearScale",
      "scope": "instance",
      "___id": "T000002R002232",
      "___s": true
    },
    {
      "comment": "/**\n   * {@link https://github.com/d3/d3-scale#_continuous }\n   * @param { Number } value A value within the domain value span\n   * @return { Number } Interpolated from the range\n   */",
      "meta": {
        "range": [
          3232,
          3279
        ],
        "filename": "linear.js",
        "lineno": 116,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100017270",
          "name": "LinearScale#get",
          "type": "MethodDefinition",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "{@link https://github.com/d3/d3-scale#_continuous }",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "A value within the domain value span",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Interpolated from the range"
        }
      ],
      "name": "get",
      "longname": "LinearScale#get",
      "kind": "function",
      "memberof": "LinearScale",
      "scope": "instance",
      "___id": "T000002R002233",
      "___s": true
    },
    {
      "comment": "/**\n   * Get the first value of the domain\n   * @return { Number }\n   */",
      "meta": {
        "range": [
          3358,
          3400
        ],
        "filename": "linear.js",
        "lineno": 124,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100017281",
          "name": "LinearScale#start",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the first value of the domain",
      "returns": [
        {
          "type": {
            "names": [
              "Number"
            ]
          }
        }
      ],
      "name": "start",
      "longname": "LinearScale#start",
      "kind": "function",
      "memberof": "LinearScale",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002234",
      "___s": true
    },
    {
      "comment": "/**\n   * Get the last value of the domain\n   * @return { Number }\n   */",
      "meta": {
        "range": [
          3478,
          3541
        ],
        "filename": "linear.js",
        "lineno": 132,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100017292",
          "name": "LinearScale#end",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the last value of the domain",
      "returns": [
        {
          "type": {
            "names": [
              "Number"
            ]
          }
        }
      ],
      "name": "end",
      "longname": "LinearScale#end",
      "kind": "function",
      "memberof": "LinearScale",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002235",
      "___s": true
    },
    {
      "comment": "/**\n   * Get the minimum value of the domain\n   * @return { Number }\n   */",
      "meta": {
        "range": [
          3622,
          3680
        ],
        "filename": "linear.js",
        "lineno": 140,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100017310",
          "name": "LinearScale#min",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the minimum value of the domain",
      "returns": [
        {
          "type": {
            "names": [
              "Number"
            ]
          }
        }
      ],
      "name": "min",
      "longname": "LinearScale#min",
      "kind": "function",
      "memberof": "LinearScale",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002236",
      "___s": true
    },
    {
      "comment": "/**\n   * Get the maximum value of the domain\n   * @return { Number }\n   */",
      "meta": {
        "range": [
          3761,
          3819
        ],
        "filename": "linear.js",
        "lineno": 148,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100017327",
          "name": "LinearScale#max",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the maximum value of the domain",
      "returns": [
        {
          "type": {
            "names": [
              "Number"
            ]
          }
        }
      ],
      "name": "max",
      "longname": "LinearScale#max",
      "kind": "function",
      "memberof": "LinearScale",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002237",
      "___s": true
    },
    {
      "comment": "/**\n   * Assign a tick generator. Will be used when calling ticks function\n   * @param  { Function } generator Tick generator function\n   * @return { LinearScale } The instance this method was called on\n   */",
      "meta": {
        "range": [
          4034,
          4118
        ],
        "filename": "linear.js",
        "lineno": 157,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100017344",
          "name": "LinearScale#tickGenerator",
          "type": "MethodDefinition",
          "paramnames": [
            "generator"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Assign a tick generator. Will be used when calling ticks function",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Tick generator function",
          "name": "generator"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "LinearScale"
            ]
          },
          "description": "The instance this method was called on"
        }
      ],
      "name": "tickGenerator",
      "longname": "LinearScale#tickGenerator",
      "kind": "function",
      "memberof": "LinearScale",
      "scope": "instance",
      "___id": "T000002R002238",
      "___s": true
    },
    {
      "comment": "/**\n   * Divides the domain and range into uniform segments, based on start and end value\n   * @param  { Number } segments The number of segments\n   * @return { LinearScale } The instance this method was called on\n   * @example\n   * let s = new LinearScale( [0, 10], [0, 1] );\n   * s.classify( 2 );\n   * s.domain(); // [10, 5, 5, 0]\n   * s.range(); // [0.75, 0.75, 0.25, 0.25]\n   */",
      "meta": {
        "range": [
          4507,
          5109
        ],
        "filename": "linear.js",
        "lineno": 172,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100017357",
          "name": "LinearScale#classify",
          "type": "MethodDefinition",
          "paramnames": [
            "segments"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Divides the domain and range into uniform segments, based on start and end value",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The number of segments",
          "name": "segments"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "LinearScale"
            ]
          },
          "description": "The instance this method was called on"
        }
      ],
      "examples": [
        "let s = new LinearScale( [0, 10], [0, 1] );\ns.classify( 2 );\ns.domain(); // [10, 5, 5, 0]\ns.range(); // [0.75, 0.75, 0.25, 0.25]"
      ],
      "name": "classify",
      "longname": "LinearScale#classify",
      "kind": "function",
      "memberof": "LinearScale",
      "scope": "instance",
      "___id": "T000002R002240",
      "___s": true
    },
    {
      "comment": "/**\n * LinearScale instantiator\n * @private\n * @param { Number[] } [ domain=[0,1] ] The domain values\n * @param { Number[] } [ range=[0,1] ] The range values\n * @return { LinearScale } LinearScale instance\n */",
      "meta": {
        "range": [
          5468,
          5532
        ],
        "filename": "linear.js",
        "lineno": 209,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100017500",
          "name": "exports.linear",
          "type": "FunctionDeclaration",
          "paramnames": [
            "a"
          ]
        }
      },
      "description": "LinearScale instantiator",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array.<Number>"
            ]
          },
          "optional": true,
          "defaultvalue": "[0,1]",
          "description": "The domain values",
          "name": "domain"
        },
        {
          "type": {
            "names": [
              "Array.<Number>"
            ]
          },
          "optional": true,
          "defaultvalue": "[0,1]",
          "description": "The range values",
          "name": "range"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "LinearScale"
            ]
          },
          "description": "LinearScale instance"
        }
      ],
      "name": "linear",
      "longname": "linear",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R002251",
      "___s": true
    },
    {
      "comment": "/**\n* Generate ticks based on a distance, for each 100th unit, one additional tick may be added\n* @private\n* @param  {Number} distance       Distance between each tick\n* @param  {Number} scale         The scale instance\n* @param  {Number} [minorCount=0]     Number of tick added between each distance\n* @param  {Number} [unitDivider=100]   Number to divide distance with\n* @return {Array}               Array of ticks\n*/",
      "meta": {
        "range": [
          5956,
          6526
        ],
        "filename": "linear.js",
        "lineno": 223,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100017511",
          "name": "exports.looseDistanceBasedGenerator",
          "type": "FunctionDeclaration",
          "paramnames": [
            ""
          ]
        }
      },
      "description": "Generate ticks based on a distance, for each 100th unit, one additional tick may be added",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Distance between each tick",
          "name": "distance"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The scale instance",
          "name": "scale"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "Number of tick added between each distance",
          "name": "minorCount"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 100,
          "description": "Number to divide distance with",
          "name": "unitDivider"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Array of ticks"
        }
      ],
      "name": "looseDistanceBasedGenerator",
      "longname": "looseDistanceBasedGenerator",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R002253",
      "___s": true
    },
    {
      "comment": "/**\n* Generate ticks based on a distance, for each 100th unit, one additional tick may be added.\n* Will attempt to round the bounds of domain to even values and generate ticks hitting the domain bounds.\n* @private\n* @param  {Number} distance       Distance between each tick\n* @param  {Number} scale         The scale instance\n* @param  {Number} [minorCount=0]     Number of tick added between each distance\n* @param  {Number} [unitDivider=100]   Number to divide distance with\n* @return {Array}               Array of ticks\n*/",
      "meta": {
        "range": [
          7056,
          7622
        ],
        "filename": "linear.js",
        "lineno": 254,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100017615",
          "name": "exports.tightDistanceBasedGenerator",
          "type": "FunctionDeclaration",
          "paramnames": [
            ""
          ]
        }
      },
      "description": "Generate ticks based on a distance, for each 100th unit, one additional tick may be added.\nWill attempt to round the bounds of domain to even values and generate ticks hitting the domain bounds.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Distance between each tick",
          "name": "distance"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The scale instance",
          "name": "scale"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "Number of tick added between each distance",
          "name": "minorCount"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "defaultvalue": 100,
          "description": "Number to divide distance with",
          "name": "unitDivider"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Array of ticks"
        }
      ],
      "name": "tightDistanceBasedGenerator",
      "longname": "tightDistanceBasedGenerator",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R002268",
      "___s": true
    },
    {
      "comment": "/**\n   * Class representing a OrdinalScale\n   * @private\n   * @param { Object[] } [ domain=[] ] The domain values\n   * @param { Object[] } [ range=[] ] The range values\n   */",
      "meta": {
        "range": [
          287,
          411
        ],
        "filename": "ordinal.js",
        "lineno": 11,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100017735",
          "name": "OrdinalScale",
          "type": "MethodDefinition",
          "paramnames": [
            "domain",
            "range"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Class representing a OrdinalScale",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array.<Object>"
            ]
          },
          "optional": true,
          "defaultvalue": "[]",
          "description": "The domain values",
          "name": "domain"
        },
        {
          "type": {
            "names": [
              "Array.<Object>"
            ]
          },
          "optional": true,
          "defaultvalue": "[]",
          "description": "The range values",
          "name": "range"
        }
      ],
      "name": "OrdinalScale",
      "longname": "OrdinalScale",
      "kind": "class",
      "scope": "global",
      "___id": "T000002R002285",
      "___s": true
    },
    {
      "comment": "/**\n   * @param { Object[] } [values] Set or Get domain values\n   * @return { OrdinalScale | Object[] } The instance this method was called on if a parameter is provided, otherwise the current domain is returned\n   */",
      "meta": {
        "range": [
          635,
          803
        ],
        "filename": "ordinal.js",
        "lineno": 21,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100017764",
          "name": "OrdinalScale#domain",
          "type": "MethodDefinition",
          "paramnames": [
            "values"
          ]
        },
        "vars": {
          "": null
        }
      },
      "params": [
        {
          "type": {
            "names": [
              "Array.<Object>"
            ]
          },
          "optional": true,
          "description": "Set or Get domain values",
          "name": "values"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "OrdinalScale",
              "Array.<Object>"
            ]
          },
          "description": "The instance this method was called on if a parameter is provided, otherwise the current domain is returned"
        }
      ],
      "name": "domain",
      "longname": "OrdinalScale#domain",
      "kind": "function",
      "memberof": "OrdinalScale",
      "scope": "instance",
      "___id": "T000002R002287",
      "___s": true
    },
    {
      "comment": "/**\n   * @param { Object[] } [values] Set or Get range values\n   * @return { OrdinalScale | Object[] } The instance this method was called on if a parameter is provided, otherwise the current range is returned\n   */",
      "meta": {
        "range": [
          1025,
          1190
        ],
        "filename": "ordinal.js",
        "lineno": 34,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100017797",
          "name": "OrdinalScale#range",
          "type": "MethodDefinition",
          "paramnames": [
            "values"
          ]
        },
        "vars": {
          "": null
        }
      },
      "params": [
        {
          "type": {
            "names": [
              "Array.<Object>"
            ]
          },
          "optional": true,
          "description": "Set or Get range values",
          "name": "values"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "OrdinalScale",
              "Array.<Object>"
            ]
          },
          "description": "The instance this method was called on if a parameter is provided, otherwise the current range is returned"
        }
      ],
      "name": "range",
      "longname": "OrdinalScale#range",
      "kind": "function",
      "memberof": "OrdinalScale",
      "scope": "instance",
      "___id": "T000002R002288",
      "___s": true
    },
    {
      "comment": "/**\n   * {@link https://github.com/d3/d3-scale#ordinal_unknown }\n   * @param { Number } value\n   * @return { Number }\n   */",
      "meta": {
        "range": [
          1320,
          1489
        ],
        "filename": "ordinal.js",
        "lineno": 48,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100017830",
          "name": "OrdinalScale#unknown",
          "type": "MethodDefinition",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "{@link https://github.com/d3/d3-scale#ordinal_unknown }",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Number"
            ]
          }
        }
      ],
      "name": "unknown",
      "longname": "OrdinalScale#unknown",
      "kind": "function",
      "memberof": "OrdinalScale",
      "scope": "instance",
      "___id": "T000002R002289",
      "___s": true
    },
    {
      "comment": "/**\n   * {@link https://github.com/d3/d3-scale#_ordinal }\n   * @param { Number } value\n   * @return { Number }\n   */",
      "meta": {
        "range": [
          1612,
          1659
        ],
        "filename": "ordinal.js",
        "lineno": 62,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100017863",
          "name": "OrdinalScale#get",
          "type": "MethodDefinition",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "{@link https://github.com/d3/d3-scale#_ordinal }",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Number"
            ]
          }
        }
      ],
      "name": "get",
      "longname": "OrdinalScale#get",
      "kind": "function",
      "memberof": "OrdinalScale",
      "scope": "instance",
      "___id": "T000002R002290",
      "___s": true
    },
    {
      "comment": "/**\n   * Get the first value of the domain\n   * @return { Number }\n   */",
      "meta": {
        "range": [
          1738,
          1784
        ],
        "filename": "ordinal.js",
        "lineno": 70,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100017874",
          "name": "OrdinalScale#start",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the first value of the domain",
      "returns": [
        {
          "type": {
            "names": [
              "Number"
            ]
          }
        }
      ],
      "name": "start",
      "longname": "OrdinalScale#start",
      "kind": "member",
      "memberof": "OrdinalScale",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002291",
      "___s": true
    },
    {
      "comment": "/**\n   * Get the last value of the domain\n   * @return { Number }\n   */",
      "meta": {
        "range": [
          1862,
          1929
        ],
        "filename": "ordinal.js",
        "lineno": 78,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100017885",
          "name": "OrdinalScale#end",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the last value of the domain",
      "returns": [
        {
          "type": {
            "names": [
              "Number"
            ]
          }
        }
      ],
      "name": "end",
      "longname": "OrdinalScale#end",
      "kind": "member",
      "memberof": "OrdinalScale",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002292",
      "___s": true
    },
    {
      "comment": "/**\n * OrdinalScale instantiator\n * @private\n * @param { Object[] } [ domain=[] ] The domain values\n * @param { Object[] } [ range=[] ] The range values\n * @return { OrdinalScale } OrdinalScale instance\n */",
      "meta": {
        "range": [
          2179,
          2245
        ],
        "filename": "ordinal.js",
        "lineno": 92,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scales",
        "code": {
          "id": "astnode100017911",
          "name": "exports.ordinal",
          "type": "FunctionDeclaration",
          "paramnames": [
            "a"
          ]
        }
      },
      "description": "OrdinalScale instantiator",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Array.<Object>"
            ]
          },
          "optional": true,
          "defaultvalue": "[]",
          "description": "The domain values",
          "name": "domain"
        },
        {
          "type": {
            "names": [
              "Array.<Object>"
            ]
          },
          "optional": true,
          "defaultvalue": "[]",
          "description": "The range values",
          "name": "range"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "OrdinalScale"
            ]
          },
          "description": "OrdinalScale instance"
        }
      ],
      "name": "ordinal",
      "longname": "ordinal",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R002293",
      "___s": true
    },
    {
      "comment": "/**\n   * Returns the value of attribute a.\n   * @param a\n   * @returns {*} The value of attribute a.\n   */",
      "meta": {
        "range": [
          1182,
          1215
        ],
        "filename": "display-object.js",
        "lineno": 47,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scene-graph/display-objects",
        "code": {
          "id": "astnode100018607",
          "name": "DisplayObject#attr",
          "type": "MethodDefinition",
          "paramnames": [
            "a"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns the value of attribute a.",
      "params": [
        {
          "name": "a"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The value of attribute a."
        }
      ],
      "name": "attr",
      "longname": "DisplayObject#attr",
      "kind": "function",
      "memberof": "DisplayObject",
      "scope": "instance",
      "___id": "T000002R002388",
      "___s": true
    },
    {
      "comment": "/**\n   * Removes given child node from this node.\n   * @param {Node} c\n   * @returns {Node} This object, for chaining purposes.\n   */",
      "meta": {
        "range": [
          1134,
          1331
        ],
        "filename": "node-container.js",
        "lineno": 50,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scene-graph",
        "code": {
          "id": "astnode100019307",
          "name": "NodeContainer#removeChild",
          "type": "MethodDefinition",
          "paramnames": [
            "c"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Removes given child node from this node.",
      "params": [
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "name": "c"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "description": "This object, for chaining purposes."
        }
      ],
      "name": "removeChild",
      "longname": "NodeContainer#removeChild",
      "kind": "function",
      "memberof": "NodeContainer",
      "scope": "instance",
      "___id": "T000002R002487",
      "___s": true
    },
    {
      "comment": "/**\n   * @private\n   */",
      "meta": {
        "range": [
          41,
          158
        ],
        "filename": "node.js",
        "lineno": 5,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scene-graph",
        "code": {
          "id": "astnode100019421",
          "name": "Node",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "access": "private",
      "name": "Node",
      "longname": "Node",
      "kind": "class",
      "scope": "global",
      "params": [],
      "___id": "T000002R002498",
      "___s": true
    },
    {
      "comment": "/**\n   * Detaches this node from its parent, if such exists.\n   * @returns {Node}\n   */",
      "meta": {
        "range": [
          252,
          351
        ],
        "filename": "node.js",
        "lineno": 16,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scene-graph",
        "code": {
          "id": "astnode100019449",
          "name": "Node#detach",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Detaches this node from its parent, if such exists.",
      "returns": [
        {
          "type": {
            "names": [
              "Node"
            ]
          }
        }
      ],
      "name": "detach",
      "longname": "Node#detach",
      "kind": "function",
      "memberof": "Node",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002503",
      "___s": true
    },
    {
      "comment": "/**\n   * Parent of this node.\n   * @readonly\n   * @type {Node}\n   */",
      "meta": {
        "range": [
          426,
          469
        ],
        "filename": "node.js",
        "lineno": 28,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scene-graph",
        "code": {
          "id": "astnode100019468",
          "name": "Node#parent",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Parent of this node.",
      "readonly": true,
      "type": {
        "names": [
          "Node"
        ]
      },
      "name": "parent",
      "longname": "Node#parent",
      "kind": "member",
      "memberof": "Node",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002504",
      "___s": true
    },
    {
      "comment": "/**\n   * Checks whether this node is a branch.\n   * @readonly\n   * @type {Boolean} True if this node has children, false otherwise.\n   */",
      "meta": {
        "range": [
          613,
          685
        ],
        "filename": "node.js",
        "lineno": 37,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scene-graph",
        "code": {
          "id": "astnode100019476",
          "name": "Node#isBranch",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Checks whether this node is a branch.",
      "readonly": true,
      "type": {
        "names": [
          "Boolean"
        ]
      },
      "name": "isBranch",
      "longname": "Node#isBranch",
      "kind": "member",
      "memberof": "Node",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002505",
      "___s": true
    },
    {
      "comment": "/**\n   * Children of this node.\n   * @readonly\n   * @type {Node[]}\n   */",
      "meta": {
        "range": [
          764,
          811
        ],
        "filename": "node.js",
        "lineno": 46,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scene-graph",
        "code": {
          "id": "astnode100019490",
          "name": "Node#children",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Children of this node.",
      "readonly": true,
      "type": {
        "names": [
          "Array.<Node>"
        ]
      },
      "name": "children",
      "longname": "Node#children",
      "kind": "member",
      "memberof": "Node",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002506",
      "___s": true
    },
    {
      "comment": "/**\n   * Ancestors of this node, including parent.\n   * @readonly\n   * @type {Node[]}\n   */",
      "meta": {
        "range": [
          909,
          1081
        ],
        "filename": "node.js",
        "lineno": 55,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scene-graph",
        "code": {
          "id": "astnode100019498",
          "name": "Node#ancestors",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Ancestors of this node, including parent.",
      "readonly": true,
      "type": {
        "names": [
          "Array.<Node>"
        ]
      },
      "name": "ancestors",
      "longname": "Node#ancestors",
      "kind": "member",
      "memberof": "Node",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002507",
      "___s": true
    },
    {
      "comment": "/**\n   * Descendants of this node.\n   * @readonly\n   * @type {Node[]}\n   */",
      "meta": {
        "range": [
          1163,
          1437
        ],
        "filename": "node.js",
        "lineno": 69,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/scene-graph",
        "code": {
          "id": "astnode100019534",
          "name": "Node#descendants",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Descendants of this node.",
      "readonly": true,
      "type": {
        "names": [
          "Array.<Node>"
        ]
      },
      "name": "descendants",
      "longname": "Node#descendants",
      "kind": "member",
      "memberof": "Node",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002510",
      "___s": true
    },
    {
      "comment": "/**\n* Resolves styles from multiple sources\n* @private\n* @param {object} defaults Default settings of the target property\n* @param {object} settings Externally defined style root\n* @param {string} propertyName Name of child property to access\n* @returns {object} combined styles\n* @example\n* // returns { stroke: \"#00f\", strokeWidth: 2, fill: \"red\",\n*     width: function(999, widthResolve, ...args) }\n* resolveSettings(\n*    {\n*    stroke: \"#000\",\n*    strokeWidth: 1,\n*       fill: \"red\",\n*       width: 999\n*  },\n*   {\n*        stroke: \"#f00\",\n*        strokeWidth: 2,\n*        parts: {\n*            rect: {\n*                stroke: \"#00f\",\n*                width: function widthResolve ( dataVal, index, dataValues ) {\n*                  return dataVal.value;\n*                }\n*            },\n*            label: { }\n*        }\n*    },\n*    \"parts.rect\" );\n*/",
      "meta": {
        "range": [
          2827,
          3186
        ],
        "filename": "index.js",
        "lineno": 111,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/style",
        "code": {
          "id": "astnode100020345",
          "name": "exports.resolveStyle",
          "type": "FunctionDeclaration",
          "paramnames": [
            "defaults",
            "styleRoot",
            "path"
          ]
        }
      },
      "description": "Resolves styles from multiple sources",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Default settings of the target property",
          "name": "defaults"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Externally defined style root",
          "name": "settings"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Name of child property to access",
          "name": "propertyName"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "combined styles"
        }
      ],
      "examples": [
        "// returns { stroke: \"#00f\", strokeWidth: 2, fill: \"red\",\n    width: function(999, widthResolve, ...args) }\nresolveSettings(\n   {\n   stroke: \"#000\",\n   strokeWidth: 1,\n      fill: \"red\",\n      width: 999\n },\n  {\n       stroke: \"#f00\",\n       strokeWidth: 2,\n       parts: {\n           rect: {\n               stroke: \"#00f\",\n               width: function widthResolve ( dataVal, index, dataValues ) {\n                 return dataVal.value;\n               }\n           },\n           label: { }\n       }\n   },\n   \"parts.rect\" );"
      ],
      "name": "resolveStyle",
      "longname": "resolveStyle",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R002572",
      "___s": true
    },
    {
      "comment": "/**\n* Resolves styles for individual data values\n* @private\n* @param {object} styles for the target\n* @param {array} dataValues Calculated values for the target\n* @param {int} index Current index in dataValues array to resolve\n* @returns {object} resolved styles for each attribute as appropriate type\n*/",
      "meta": {
        "range": [
          3492,
          3926
        ],
        "filename": "index.js",
        "lineno": 128,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/style",
        "code": {
          "id": "astnode100020417",
          "name": "exports.resolveForDataValues",
          "type": "FunctionDeclaration",
          "paramnames": [
            "styles",
            "dataValues",
            "index"
          ]
        }
      },
      "description": "Resolves styles for individual data values",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "for the target",
          "name": "styles"
        },
        {
          "type": {
            "names": [
              "array"
            ]
          },
          "description": "Calculated values for the target",
          "name": "dataValues"
        },
        {
          "type": {
            "names": [
              "int"
            ]
          },
          "description": "Current index in dataValues array to resolve",
          "name": "index"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "resolved styles for each attribute as appropriate type"
        }
      ],
      "name": "resolveForDataValues",
      "longname": "resolveForDataValues",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R002578",
      "___s": true
    },
    {
      "comment": "/**\n   * @private\n   */",
      "meta": {
        "range": [
          47,
          241
        ],
        "filename": "transposer.js",
        "lineno": 5,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/transposer",
        "code": {
          "id": "astnode100020517",
          "name": "Transposer",
          "type": "MethodDefinition",
          "paramnames": [
            "items"
          ]
        },
        "vars": {
          "": null
        }
      },
      "access": "private",
      "name": "Transposer",
      "longname": "Transposer",
      "kind": "class",
      "scope": "global",
      "params": [],
      "___id": "T000002R002584",
      "___s": true
    },
    {
      "comment": "/**\n   * Evaluate a key for a transposed coordinate\n   *\n   * @param  {String} key   Key\n   * @return {String}         Actual key\n   */",
      "meta": {
        "range": [
          383,
          897
        ],
        "filename": "transposer.js",
        "lineno": 24,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/transposer",
        "code": {
          "id": "astnode100020566",
          "name": "Transposer#evaluateKey",
          "type": "MethodDefinition",
          "paramnames": [
            "key"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Evaluate a key for a transposed coordinate",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Key",
          "name": "key"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Actual key"
        }
      ],
      "name": "evaluateKey",
      "longname": "Transposer#evaluateKey",
      "kind": "function",
      "memberof": "Transposer",
      "scope": "instance",
      "___id": "T000002R002591",
      "___s": true
    },
    {
      "comment": "/**\n   * Transpose a coordinate according to this.vertical and\n   * the available rendering area\n   *\n   * @param  {String} key        The key of the coordinate to transpose\n   * @param  {Number} coordinate The coordinate\n   * @return {Number}            The actual location of the coordinate\n   */",
      "meta": {
        "range": [
          1202,
          1787
        ],
        "filename": "transposer.js",
        "lineno": 55,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/transposer",
        "code": {
          "id": "astnode100020643",
          "name": "Transposer#transposeCoordinate",
          "type": "MethodDefinition",
          "paramnames": [
            "key",
            "coordinate"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Transpose a coordinate according to this.vertical and\nthe available rendering area",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The key of the coordinate to transpose",
          "name": "key"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The coordinate",
          "name": "coordinate"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The actual location of the coordinate"
        }
      ],
      "name": "transposeCoordinate",
      "longname": "Transposer#transposeCoordinate",
      "kind": "function",
      "memberof": "Transposer",
      "scope": "instance",
      "___id": "T000002R002594",
      "___s": true
    },
    {
      "comment": "/**\n   * Push an item into the storage of the transposer\n   *\n   * @param  {Object} items An item to be drawed\n   * @return {Object}       Can be chained\n   */",
      "meta": {
        "range": [
          1953,
          2023
        ],
        "filename": "transposer.js",
        "lineno": 81,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/transposer",
        "code": {
          "id": "astnode100020729",
          "name": "Transposer#push",
          "type": "MethodDefinition",
          "paramnames": [
            "items"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Push an item into the storage of the transposer",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "An item to be drawed",
          "name": "items",
          "variable": true
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Can be chained"
        }
      ],
      "name": "push",
      "longname": "Transposer#push",
      "kind": "function",
      "memberof": "Transposer",
      "scope": "instance",
      "___id": "T000002R002596",
      "___s": true
    },
    {
      "comment": "/**\n   * Get the output of the transposer\n   *\n   * @return {Array}   Array of objects\n   */",
      "meta": {
        "range": [
          2122,
          2473
        ],
        "filename": "transposer.js",
        "lineno": 91,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/transposer",
        "code": {
          "id": "astnode100020746",
          "name": "Transposer#output",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the output of the transposer",
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Array of objects"
        }
      ],
      "name": "output",
      "longname": "Transposer#output",
      "kind": "function",
      "memberof": "Transposer",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002597",
      "___s": true
    },
    {
      "comment": "/**\n   * Function used to add event handling to objects passed in.\n   * @private\n   * @param {Object} obj Object instance that will get event handling.\n   */",
      "meta": {
        "range": [
          227,
          384
        ],
        "filename": "event-emitter.js",
        "lineno": 9,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/utils",
        "code": {
          "id": "astnode100020832",
          "name": "mixin",
          "type": "FunctionExpression"
        },
        "vars": {
          "": null
        }
      },
      "description": "Function used to add event handling to objects passed in.",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Object instance that will get event handling.",
          "name": "obj"
        }
      ],
      "name": "mixin",
      "longname": "module.exports.mixin",
      "kind": "function",
      "memberof": "module.exports",
      "scope": "static",
      "___id": "T000002R002607",
      "___s": true
    },
    {
      "comment": "/**\n   * @private\n   * @example\n   * var r = new Registry();\n   * r.register( \"marker\", function( args ) {\n   *   return new markers[args.type]( args );\n   * } );\n   *\n   * r.build( {\n   *   marker: {\n   *     type: \"point\"\n   *   }\n   * } );\n   *\n   */",
      "meta": {
        "range": [
          275,
          328
        ],
        "filename": "registry.js",
        "lineno": 17,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/utils",
        "code": {
          "id": "astnode100020870",
          "name": "Registry",
          "type": "MethodDefinition",
          "paramnames": [
            "reg"
          ]
        },
        "vars": {
          "": null
        }
      },
      "access": "private",
      "examples": [
        "var r = new Registry();\nr.register( \"marker\", function( args ) {\n  return new markers[args.type]( args );\n} );\n\nr.build( {\n  marker: {\n    type: \"point\"\n  }\n} );"
      ],
      "name": "Registry",
      "longname": "Registry",
      "kind": "class",
      "scope": "global",
      "params": [],
      "___id": "T000002R002610",
      "___s": true
    },
    {
      "comment": "/**\n   * Register a factory function\n   * @deprecated - Use #add instead\n   * @param name\n   * @param fn\n   */",
      "meta": {
        "range": [
          445,
          788
        ],
        "filename": "registry.js",
        "lineno": 27,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/utils",
        "code": {
          "id": "astnode100020883",
          "name": "Registry#register",
          "type": "MethodDefinition",
          "paramnames": [
            "name",
            "fn"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Register a factory function",
      "deprecated": "- Use #add instead",
      "params": [
        {
          "name": "name"
        },
        {
          "name": "fn"
        }
      ],
      "name": "register",
      "longname": "Registry#register",
      "kind": "function",
      "memberof": "Registry",
      "scope": "instance",
      "___id": "T000002R002612",
      "___s": true
    },
    {
      "comment": "/**\n   * Walk through obj properties and call factory function on registered properties\n   * @returns {*}\n   */",
      "meta": {
        "range": [
          1228,
          1431
        ],
        "filename": "registry.js",
        "lineno": 67,
        "path": "/Users/bge/qlik/git/picasso.js/src/core/utils",
        "code": {
          "id": "astnode100021007",
          "name": "Registry#build",
          "type": "MethodDefinition",
          "paramnames": [
            "obj",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Walk through obj properties and call factory function on registered properties",
      "returns": [
        {
          "type": {
            "names": [
              "*"
            ]
          }
        }
      ],
      "name": "build",
      "longname": "Registry#build",
      "kind": "function",
      "memberof": "Registry",
      "scope": "instance",
      "params": [],
      "___id": "T000002R002620",
      "___s": true
    },
    {
      "comment": "/**\n * The mother of all namespaces\n * @namespace picasso\n */",
      "meta": {
        "range": [
          108,
          169
        ],
        "filename": "index.js",
        "lineno": 9,
        "path": "/Users/bge/qlik/git/picasso.js/src",
        "code": {}
      },
      "description": "The mother of all namespaces",
      "kind": "namespace",
      "name": "picasso",
      "longname": "picasso",
      "scope": "global",
      "___id": "T000002R002627",
      "___s": true
    },
    {
      "comment": "/**\n * Data interface for the Qlik Sense hypercube format\n * @private\n * @param  {function} [fieldFn=qField] Field factory function\n * @return {table}                  Data table\n */",
      "meta": {
        "range": [
          646,
          1374
        ],
        "filename": "q-table.js",
        "lineno": 25,
        "path": "/Users/bge/qlik/git/picasso.js/src/q/data",
        "code": {
          "id": "astnode100021567",
          "name": "exports.qTable",
          "type": "FunctionDeclaration",
          "paramnames": [
            "fieldFn"
          ]
        }
      },
      "description": "Data interface for the Qlik Sense hypercube format",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "defaultvalue": "qField",
          "description": "Field factory function",
          "name": "fieldFn"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "table"
            ]
          },
          "description": "Data table"
        }
      ],
      "name": "qTable",
      "longname": "qTable",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R002664",
      "___s": true
    },
    {
      "comment": "/**\n   * Format a value according to the specified pattern created at construct\n   *\n   * @param  {Number} value   The number to be formatted\n   * @return {String}         [description]\n   */",
      "meta": {
        "range": [
          408,
          475
        ],
        "filename": "numberFormat.js",
        "lineno": 12,
        "path": "/Users/bge/qlik/git/picasso.js/src/q/formatter",
        "code": {
          "id": "astnode100021802",
          "name": "format",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Format a value according to the specified pattern created at construct",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The number to be formatted",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "[description]"
        }
      ],
      "name": "format",
      "longname": "formatter~format",
      "kind": "function",
      "memberof": "formatter",
      "scope": "inner",
      "___id": "T000002R002681",
      "___s": true
    },
    {
      "comment": "/**\n    * Format a value according to a specific pattern\n    * that is not the one specified in the constructor\n    *\n    * @param  {String} p   Pattern\n    * @param  {Number} v   Value\n    * @param  {String} t   Thousand\n    * @param  {String} d   Decimal\n    * @return {String}     Formatted value\n    */",
      "meta": {
        "range": [
          789,
          871
        ],
        "filename": "numberFormat.js",
        "lineno": 26,
        "path": "/Users/bge/qlik/git/picasso.js/src/q/formatter",
        "code": {
          "id": "astnode100021813",
          "name": "format.format",
          "type": "FunctionExpression",
          "funcscope": "formatter",
          "paramnames": [
            "p",
            "v",
            "t",
            "d"
          ]
        }
      },
      "description": "Format a value according to a specific pattern\nthat is not the one specified in the constructor",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Pattern",
          "name": "p"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Value",
          "name": "v"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Thousand",
          "name": "t"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Decimal",
          "name": "d"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Formatted value"
        }
      ],
      "name": "format",
      "longname": "formatter~format.format",
      "kind": "function",
      "memberof": "formatter~format",
      "scope": "static",
      "___id": "T000002R002682",
      "___s": true
    },
    {
      "comment": "/**\n    * Change the pattern on existing formatter\n    *\n    * @param  {String} p     Pattern (optional)\n    * @return {String}       Returns the pattern\n    */",
      "meta": {
        "range": [
          1040,
          1174
        ],
        "filename": "numberFormat.js",
        "lineno": 36,
        "path": "/Users/bge/qlik/git/picasso.js/src/q/formatter",
        "code": {
          "id": "astnode100021833",
          "name": "format.pattern",
          "type": "FunctionExpression",
          "funcscope": "formatter",
          "paramnames": [
            "p"
          ]
        },
        "vars": {
          "qformat.pattern": "formatter~qformat.pattern"
        }
      },
      "description": "Change the pattern on existing formatter",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Pattern (optional)",
          "name": "p"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Returns the pattern"
        }
      ],
      "name": "pattern",
      "longname": "formatter~format.pattern",
      "kind": "function",
      "memberof": "formatter~format",
      "scope": "static",
      "___id": "T000002R002683",
      "___s": true
    },
    {
      "comment": "/**\n   * @name DateFormatter\n   * @constructs\n   * @param {Object} localeInfo\n   * @param {String} pattern\n   */",
      "meta": {
        "range": [
          3780,
          3892
        ],
        "filename": "qs-date-formatter.js",
        "lineno": 187,
        "path": "/Users/bge/qlik/git/picasso.js/src/q/formatter/parts",
        "code": {}
      },
      "name": "DateFormatter",
      "alias": "{@thisClass}",
      "kind": "class",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "localeInfo"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "name": "pattern"
        }
      ],
      "longname": "DateFormatter",
      "scope": "global",
      "___id": "T000002R002789",
      "___s": true
    },
    {
      "comment": "/**\n   * Formats a date according to given pattern\n   * @param {Date} date The date to format.\n   * @param {String} pattern The desired format of the date\n   * var d = new Date(2013, 8, 15, 13, 55, 40, 987);\n   * var n = new DateFormatter();\n   * @example\n   * m.format( d, 'YYYY-MM-DD hh:mm:ss.ffff') // 2013-08-15 13:55:40.9870\n   * m.format( d, 'h:m:s tt') // 1:55:40 pm\n   * m.format( d, 'h:m:s TT') // 1:55:40 PM\n   * m.format( d, 'M/D/YYYY') // 8/15/2013\n   * m.format( d, 'WWWW DD MMM') // Thursday 15 Aug\n   * m.format( d, 'WWW DD MMMM @ hh:mm:ss') // Thu 15 August @ 13:55:40\n   */",
      "meta": {
        "range": [
          5516,
          6963
        ],
        "filename": "qs-date-formatter.js",
        "lineno": 244,
        "path": "/Users/bge/qlik/git/picasso.js/src/q/formatter/parts",
        "code": {
          "id": "astnode100022834",
          "name": "DateFormatter#format",
          "type": "MethodDefinition",
          "paramnames": [
            "date",
            "pattern"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Formats a date according to given pattern",
      "params": [
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "description": "The date to format.",
          "name": "date"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The desired format of the date\nvar d = new Date(2013, 8, 15, 13, 55, 40, 987);\nvar n = new DateFormatter();",
          "name": "pattern"
        }
      ],
      "examples": [
        "m.format( d, 'YYYY-MM-DD hh:mm:ss.ffff') // 2013-08-15 13:55:40.9870\nm.format( d, 'h:m:s tt') // 1:55:40 pm\nm.format( d, 'h:m:s TT') // 1:55:40 PM\nm.format( d, 'M/D/YYYY') // 8/15/2013\nm.format( d, 'WWWW DD MMM') // Thursday 15 Aug\nm.format( d, 'WWW DD MMMM @ hh:mm:ss') // Thu 15 August @ 13:55:40"
      ],
      "name": "format",
      "longname": "DateFormatter#format",
      "kind": "function",
      "memberof": "DateFormatter",
      "scope": "instance",
      "___id": "T000002R002811",
      "___s": true
    },
    {
      "comment": "/**\n   * @name NumberFormatter\n   * @constructs\n   * @param {Object} localeInfo\n   * @param {String} pattern\n   * @param {String} [thousand]\n   * @param {String} [decimal]\n   * @param {String} [type]\n   */",
      "meta": {
        "range": [
          5050,
          5255
        ],
        "filename": "qs-number-formatter.js",
        "lineno": 198,
        "path": "/Users/bge/qlik/git/picasso.js/src/q/formatter/parts",
        "code": {}
      },
      "name": "NumberFormatter",
      "alias": "{@thisClass}",
      "kind": "class",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "name": "localeInfo"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "name": "pattern"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "name": "thousand"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "name": "decimal"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "name": "type"
        }
      ],
      "longname": "NumberFormatter",
      "scope": "global",
      "___id": "T000002R002940",
      "___s": true
    },
    {
      "comment": "/**\n   * Formats a number according to a specific pattern.\n   * Use # for optional numbers and 0 for padding.\n   * @param {Number} value Number to format.\n   * @param {String} [pattern] The pattern to apply.\n   * @param {String} [t] Grouping separator.\n   * @param {String} [d] Decimal delimiter.\n   * @example\n   * format(10, \"0\") // 10;\n   * format(10, \"#\") // 10;\n   * format(10, \"##.#\") // 10;\n   * format(10, \"##.0\") // 10.0;\n   * format(10, \"000\") // 010;\n   * format(10.123, \"0.0\") // 10.1;\n   * format(10.123, \"0.00##\") // 10.123; // at least 2 decimals, never more than 4\n   * format(123456789, \"#,###\") // 123,456,789;\n   * format(123456789, \"####-####\", \"-\") // 1-2345-6789;\n   * format(10000, \"#A\") // 10k,  A -> SI abbreviation\n   * format(1234567, \"#.###A\") // 1.235M;\n   * format(0.0001, \"#.#A\") // 0.1m;\n   *\n   * format(0.257, \"0.0%\") // 25.7%; // will multiply by 100\n   * format(9876, \"$#,###\") // $9,876;\n   * format(-9876, \"$#,###;$(#,###)\") // $(9,876); // use ; for alternative formatting for negative values\n   * format(10, \"(r16)\") // a; // radix 16\n   * format(15, \"(hex)\") // f; // same as (r16)\n   * format(15, \"(HEX)\") // F;\n   * format(10, \"(bin)\") // 1010; // same as (r02)\n   * format(10, \"(oct)\") // 12; // same as (r08)\n   */",
      "meta": {
        "range": [
          6980,
          7083
        ],
        "filename": "qs-number-formatter.js",
        "lineno": 253,
        "path": "/Users/bge/qlik/git/picasso.js/src/q/formatter/parts",
        "code": {
          "id": "astnode100023989",
          "name": "NumberFormatter#format",
          "type": "MethodDefinition",
          "paramnames": [
            "value",
            "pattern",
            "t",
            "d"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Formats a number according to a specific pattern.\nUse # for optional numbers and 0 for padding.",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "Number to format.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "The pattern to apply.",
          "name": "pattern"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Grouping separator.",
          "name": "t"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "description": "Decimal delimiter.",
          "name": "d"
        }
      ],
      "examples": [
        "format(10, \"0\") // 10;\nformat(10, \"#\") // 10;\nformat(10, \"##.#\") // 10;\nformat(10, \"##.0\") // 10.0;\nformat(10, \"000\") // 010;\nformat(10.123, \"0.0\") // 10.1;\nformat(10.123, \"0.00##\") // 10.123; // at least 2 decimals, never more than 4\nformat(123456789, \"#,###\") // 123,456,789;\nformat(123456789, \"####-####\", \"-\") // 1-2345-6789;\nformat(10000, \"#A\") // 10k,  A -> SI abbreviation\nformat(1234567, \"#.###A\") // 1.235M;\nformat(0.0001, \"#.#A\") // 0.1m;\n\nformat(0.257, \"0.0%\") // 25.7%; // will multiply by 100\nformat(9876, \"$#,###\") // $9,876;\nformat(-9876, \"$#,###;$(#,###)\") // $(9,876); // use ; for alternative formatting for negative values\nformat(10, \"(r16)\") // a; // radix 16\nformat(15, \"(hex)\") // f; // same as (r16)\nformat(15, \"(HEX)\") // F;\nformat(10, \"(bin)\") // 1010; // same as (r02)\nformat(10, \"(oct)\") // 12; // same as (r08)"
      ],
      "name": "format",
      "longname": "NumberFormatter#format",
      "kind": "function",
      "memberof": "NumberFormatter",
      "scope": "instance",
      "___id": "T000002R002950",
      "___s": true
    },
    {
      "comment": "/**\n   * Prepare a value according to the specified qtype\n   *\n   * @param  {Number} value The value to be formatted\n   * @return {Number}       The converted value (if applied)\n   */",
      "meta": {
        "range": [
          706,
          831
        ],
        "filename": "timeFormat.js",
        "lineno": 28,
        "path": "/Users/bge/qlik/git/picasso.js/src/q/formatter",
        "code": {
          "id": "astnode100024983",
          "name": "prepare",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "Prepare a value according to the specified qtype",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The value to be formatted",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "The converted value (if applied)"
        }
      ],
      "name": "prepare",
      "longname": "formatter~prepare",
      "kind": "function",
      "memberof": "formatter",
      "scope": "inner",
      "___id": "T000002R003059",
      "___s": true
    },
    {
      "comment": "/**\n   * Format a value according to the specified pattern created at construct\n   *\n   * @param  {Date} value   The number to be formatted\n   * @return {String}         [description]\n   */",
      "meta": {
        "range": [
          1027,
          1117
        ],
        "filename": "timeFormat.js",
        "lineno": 41,
        "path": "/Users/bge/qlik/git/picasso.js/src/q/formatter",
        "code": {
          "id": "astnode100025000",
          "name": "format",
          "type": "FunctionDeclaration",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "value": "formatter~format~value"
        }
      },
      "description": "Format a value according to the specified pattern created at construct",
      "params": [
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "description": "The number to be formatted",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "[description]"
        }
      ],
      "name": "format",
      "longname": "formatter~format",
      "kind": "function",
      "memberof": "formatter",
      "scope": "inner",
      "___id": "T000002R003060",
      "___s": true
    },
    {
      "comment": "/**\n    * Format a value according to a specific pattern\n    * that is not the one specified in the constructor\n    *\n    * @param  {String} p   Pattern\n    * @param  {Date} v   Value\n    * @return {String}     Formatted value\n    */",
      "meta": {
        "range": [
          1358,
          1448
        ],
        "filename": "timeFormat.js",
        "lineno": 54,
        "path": "/Users/bge/qlik/git/picasso.js/src/q/formatter",
        "code": {
          "id": "astnode100025017",
          "name": "format.format",
          "type": "FunctionExpression",
          "funcscope": "formatter",
          "paramnames": [
            "p",
            "v"
          ]
        },
        "vars": {
          "v": "formatter~format.format~v"
        }
      },
      "description": "Format a value according to a specific pattern\nthat is not the one specified in the constructor",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Pattern",
          "name": "p"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "description": "Value",
          "name": "v"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Formatted value"
        }
      ],
      "name": "format",
      "longname": "formatter~format.format",
      "kind": "function",
      "memberof": "formatter~format",
      "scope": "static",
      "___id": "T000002R003062",
      "___s": true
    },
    {
      "comment": "/**\n   * Set the locale for the formatter\n   *\n   * @param  {Object} args   Locale object for formatting\n   * @return {Undefined}      Returns nothing\n   */",
      "meta": {
        "range": [
          1612,
          1718
        ],
        "filename": "timeFormat.js",
        "lineno": 65,
        "path": "/Users/bge/qlik/git/picasso.js/src/q/formatter",
        "code": {
          "id": "astnode100025039",
          "name": "format.locale",
          "type": "FunctionExpression",
          "funcscope": "formatter",
          "paramnames": [
            "li"
          ]
        },
        "vars": {
          "qformat": "formatter~format.locale~qformat"
        }
      },
      "description": "Set the locale for the formatter",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Locale object for formatting",
          "name": "args"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Undefined"
            ]
          },
          "description": "Returns nothing"
        }
      ],
      "name": "locale",
      "longname": "formatter~format.locale",
      "kind": "function",
      "memberof": "formatter~format",
      "scope": "static",
      "___id": "T000002R003064",
      "___s": true
    },
    {
      "comment": "/**\n   * Get or set the QType\n   *\n   * @param  {String} nqt New qType (optional)\n   * @return {String}     Current qtype\n   */",
      "meta": {
        "range": [
          1853,
          1960
        ],
        "filename": "timeFormat.js",
        "lineno": 77,
        "path": "/Users/bge/qlik/git/picasso.js/src/q/formatter",
        "code": {
          "id": "astnode100025057",
          "name": "format.qtype",
          "type": "FunctionExpression",
          "funcscope": "formatter",
          "paramnames": [
            "nqt"
          ]
        },
        "vars": {
          "qtype": "formatter~format.qtype~qtype"
        }
      },
      "description": "Get or set the QType",
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "New qType (optional)",
          "name": "nqt"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Current qtype"
        }
      ],
      "name": "qtype",
      "longname": "formatter~format.qtype",
      "kind": "function",
      "memberof": "formatter~format",
      "scope": "static",
      "___id": "T000002R003066",
      "___s": true
    },
    {
      "comment": "/**\n   * Constructor\n   * @private\n   * @param  {TreeCreator} treeCreator - Function used to create the DOM tree..\n   * @param  {SVGCreator} nodeCreator - Function used to create nodes.\n   * @param  {SVGMaintainer} nodeMaintainer - Function used to update nodes.\n   * @param  {SVGDestroyer} nodeDestroyer - Function used to destroy nodes.\n   */",
      "meta": {
        "range": [
          495,
          718
        ],
        "filename": "svg-tree.js",
        "lineno": 13,
        "path": "/Users/bge/qlik/git/picasso.js/src/web/renderer/svg-renderer",
        "code": {
          "id": "astnode100027360",
          "name": "module.exports",
          "type": "MethodDefinition",
          "paramnames": [
            "treeCreator",
            "nodeCreator",
            "nodeMaintainer",
            "nodeDestroyer"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Constructor",
      "access": "private",
      "params": [
        {
          "type": {
            "names": [
              "TreeCreator"
            ]
          },
          "description": "Function used to create the DOM tree..",
          "name": "treeCreator"
        },
        {
          "type": {
            "names": [
              "SVGCreator"
            ]
          },
          "description": "Function used to create nodes.",
          "name": "nodeCreator"
        },
        {
          "type": {
            "names": [
              "SVGMaintainer"
            ]
          },
          "description": "Function used to update nodes.",
          "name": "nodeMaintainer"
        },
        {
          "type": {
            "names": [
              "SVGDestroyer"
            ]
          },
          "description": "Function used to destroy nodes.",
          "name": "nodeDestroyer"
        }
      ],
      "name": "exports",
      "longname": "module.exports",
      "kind": "class",
      "memberof": "module",
      "scope": "static",
      "___id": "T000002R003285",
      "___s": true
    },
    {
      "comment": "/**\n * Create an SVGElement and attach to parent.\n * @private\n * @callback SVGCreator\n * @param {String} type - The type of element to create.\n * @param {SVGElement} parent - The parent element to append the new element to.\n * @return {SVGElement} The created element\n */",
      "meta": {
        "range": [
          960,
          1231
        ],
        "filename": "svg-tree.js",
        "lineno": 29,
        "path": "/Users/bge/qlik/git/picasso.js/src/web/renderer/svg-renderer",
        "code": {}
      },
      "description": "Create an SVGElement and attach to parent.",
      "access": "private",
      "kind": "typedef",
      "name": "SVGCreator",
      "type": {
        "names": [
          "function"
        ]
      },
      "params": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "The type of element to create.",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "SVGElement"
            ]
          },
          "description": "The parent element to append the new element to.",
          "name": "parent"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "SVGElement"
            ]
          },
          "description": "The created element"
        }
      ],
      "longname": "SVGCreator",
      "scope": "global",
      "___id": "T000002R003286",
      "___s": true
    },
    {
      "comment": "/**\n * Update the element with content from item.\n * @private\n * @callback SVGMaintainer\n * @param {SVGElement} el - The element to update\n * @param {Object} item - The object to use as input for the update\n */",
      "meta": {
        "range": [
          1233,
          1443
        ],
        "filename": "svg-tree.js",
        "lineno": 38,
        "path": "/Users/bge/qlik/git/picasso.js/src/web/renderer/svg-renderer",
        "code": {}
      },
      "description": "Update the element with content from item.",
      "access": "private",
      "kind": "typedef",
      "name": "SVGMaintainer",
      "type": {
        "names": [
          "function"
        ]
      },
      "params": [
        {
          "type": {
            "names": [
              "SVGElement"
            ]
          },
          "description": "The element to update",
          "name": "el"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "The object to use as input for the update",
          "name": "item"
        }
      ],
      "longname": "SVGMaintainer",
      "scope": "global",
      "___id": "T000002R003287",
      "___s": true
    },
    {
      "comment": "/**\n * Detach element from its parent.\n * @private\n * @callback SVGDestroyer\n * @param {SVGElement} el - Element to destroy.\n */",
      "meta": {
        "range": [
          1445,
          1573
        ],
        "filename": "svg-tree.js",
        "lineno": 46,
        "path": "/Users/bge/qlik/git/picasso.js/src/web/renderer/svg-renderer",
        "code": {}
      },
      "description": "Detach element from its parent.",
      "access": "private",
      "kind": "typedef",
      "name": "SVGDestroyer",
      "type": {
        "names": [
          "function"
        ]
      },
      "params": [
        {
          "type": {
            "names": [
              "SVGElement"
            ]
          },
          "description": "Element to destroy.",
          "name": "el"
        }
      ],
      "longname": "SVGDestroyer",
      "scope": "global",
      "___id": "T000002R003288",
      "___s": true
    },
    {
      "comment": "/**\n * Create, update and destroy nodes.\n * @private\n * @callback TreeCreator\n * @param {Object[]} existing - The existing items in the tree.\n * @param {Object[]} active - The new items to create the tree from.\n * @param {SVGCreator} creator - Function used to create nodes.\n * @param {SVGMaintainer} maintainer - Function used to update nodes.\n * @param {SVGDestroyer} destroyer - Function used to destroy nodes.\n */",
      "meta": {
        "range": [
          1575,
          1992
        ],
        "filename": "svg-tree.js",
        "lineno": 53,
        "path": "/Users/bge/qlik/git/picasso.js/src/web/renderer/svg-renderer",
        "code": {}
      },
      "description": "Create, update and destroy nodes.",
      "access": "private",
      "kind": "typedef",
      "name": "TreeCreator",
      "type": {
        "names": [
          "function"
        ]
      },
      "params": [
        {
          "type": {
            "names": [
              "Array.<Object>"
            ]
          },
          "description": "The existing items in the tree.",
          "name": "existing"
        },
        {
          "type": {
            "names": [
              "Array.<Object>"
            ]
          },
          "description": "The new items to create the tree from.",
          "name": "active"
        },
        {
          "type": {
            "names": [
              "SVGCreator"
            ]
          },
          "description": "Function used to create nodes.",
          "name": "creator"
        },
        {
          "type": {
            "names": [
              "SVGMaintainer"
            ]
          },
          "description": "Function used to update nodes.",
          "name": "maintainer"
        },
        {
          "type": {
            "names": [
              "SVGDestroyer"
            ]
          },
          "description": "Function used to destroy nodes.",
          "name": "destroyer"
        }
      ],
      "longname": "TreeCreator",
      "scope": "global",
      "___id": "T000002R003289",
      "___s": true
    },
    {
      "kind": "package",
      "longname": "package:undefined",
      "files": [
        "/Users/bge/qlik/git/picasso.js/src/config.js",
        "/Users/bge/qlik/git/picasso.js/src/core/chart-components/axis/axis-default-settings.js",
        "/Users/bge/qlik/git/picasso.js/src/core/chart-components/axis/axis-node-builder.js",
        "/Users/bge/qlik/git/picasso.js/src/core/chart-components/axis/axis-size-calculator.js",
        "/Users/bge/qlik/git/picasso.js/src/core/chart-components/axis/axis-structs.js",
        "/Users/bge/qlik/git/picasso.js/src/core/chart-components/axis/axis-tick-generators.js",
        "/Users/bge/qlik/git/picasso.js/src/core/chart-components/axis/axis.js",
        "/Users/bge/qlik/git/picasso.js/src/core/chart-components/axis/index.js",
        "/Users/bge/qlik/git/picasso.js/src/core/chart-components/grid/index.js",
        "/Users/bge/qlik/git/picasso.js/src/core/chart-components/grid/line.js",
        "/Users/bge/qlik/git/picasso.js/src/core/chart-components/index.js",
        "/Users/bge/qlik/git/picasso.js/src/core/chart-components/markers/box.js",
        "/Users/bge/qlik/git/picasso.js/src/core/chart-components/markers/generic/dispersion.js",
        "/Users/bge/qlik/git/picasso.js/src/core/chart-components/markers/generic/doodler.js",
        "/Users/bge/qlik/git/picasso.js/src/core/chart-components/markers/index.js",
        "/Users/bge/qlik/git/picasso.js/src/core/chart-components/markers/point/index.js",
        "/Users/bge/qlik/git/picasso.js/src/core/chart-components/markers/point/shapes.js",
        "/Users/bge/qlik/git/picasso.js/src/core/chart-components/settings-setup.js",
        "/Users/bge/qlik/git/picasso.js/src/core/chart-components/text/index.js",
        "/Users/bge/qlik/git/picasso.js/src/core/chart-components/text/text.js",
        "/Users/bge/qlik/git/picasso.js/src/core/charts/chart.js",
        "/Users/bge/qlik/git/picasso.js/src/core/charts/composer/formatter/index.js",
        "/Users/bge/qlik/git/picasso.js/src/core/charts/composer/index.js",
        "/Users/bge/qlik/git/picasso.js/src/core/charts/composer/scales/color.js",
        "/Users/bge/qlik/git/picasso.js/src/core/charts/composer/scales/index.js",
        "/Users/bge/qlik/git/picasso.js/src/core/charts/composer/scales/linear.js",
        "/Users/bge/qlik/git/picasso.js/src/core/charts/composer/scales/ordinal.js",
        "/Users/bge/qlik/git/picasso.js/src/core/colors/color.js",
        "/Users/bge/qlik/git/picasso.js/src/core/colors/hsla-color.js",
        "/Users/bge/qlik/git/picasso.js/src/core/colors/index.js",
        "/Users/bge/qlik/git/picasso.js/src/core/colors/instantiator/color-keyword.js",
        "/Users/bge/qlik/git/picasso.js/src/core/colors/instantiator/color-object.js",
        "/Users/bge/qlik/git/picasso.js/src/core/colors/instantiator/hex.js",
        "/Users/bge/qlik/git/picasso.js/src/core/colors/instantiator/hsl.js",
        "/Users/bge/qlik/git/picasso.js/src/core/colors/instantiator/rgb.js",
        "/Users/bge/qlik/git/picasso.js/src/core/colors/interpolators.js",
        "/Users/bge/qlik/git/picasso.js/src/core/colors/palettes.js",
        "/Users/bge/qlik/git/picasso.js/src/core/colors/rgba-color.js",
        "/Users/bge/qlik/git/picasso.js/src/core/colors/utils.js",
        "/Users/bge/qlik/git/picasso.js/src/core/data/field.js",
        "/Users/bge/qlik/git/picasso.js/src/core/data/index.js",
        "/Users/bge/qlik/git/picasso.js/src/core/data/json-path-mashup/json-path-resolver.js",
        "/Users/bge/qlik/git/picasso.js/src/core/data/json-path-resolver.js",
        "/Users/bge/qlik/git/picasso.js/src/core/data/table.js",
        "/Users/bge/qlik/git/picasso.js/src/core/dock-layout/dock-config.js",
        "/Users/bge/qlik/git/picasso.js/src/core/dock-layout/dock-layout.js",
        "/Users/bge/qlik/git/picasso.js/src/core/formatter/d3/index.js",
        "/Users/bge/qlik/git/picasso.js/src/core/formatter/d3/numberFormat.js",
        "/Users/bge/qlik/git/picasso.js/src/core/formatter/d3/timeFormat.js",
        "/Users/bge/qlik/git/picasso.js/src/core/formatter/index.js",
        "/Users/bge/qlik/git/picasso.js/src/core/geometry/circle.js",
        "/Users/bge/qlik/git/picasso.js/src/core/geometry/index.js",
        "/Users/bge/qlik/git/picasso.js/src/core/geometry/line.js",
        "/Users/bge/qlik/git/picasso.js/src/core/geometry/rect.js",
        "/Users/bge/qlik/git/picasso.js/src/core/index.js",
        "/Users/bge/qlik/git/picasso.js/src/core/math/matrix.js",
        "/Users/bge/qlik/git/picasso.js/src/core/renderer/index.js",
        "/Users/bge/qlik/git/picasso.js/src/core/scales/band.js",
        "/Users/bge/qlik/git/picasso.js/src/core/scales/interpolators/color.js",
        "/Users/bge/qlik/git/picasso.js/src/core/scales/interpolators/numeric.js",
        "/Users/bge/qlik/git/picasso.js/src/core/scales/linear.js",
        "/Users/bge/qlik/git/picasso.js/src/core/scales/ordinal.js",
        "/Users/bge/qlik/git/picasso.js/src/core/scales/ticks.js",
        "/Users/bge/qlik/git/picasso.js/src/core/scene-graph/display-objects/circle.js",
        "/Users/bge/qlik/git/picasso.js/src/core/scene-graph/display-objects/container.js",
        "/Users/bge/qlik/git/picasso.js/src/core/scene-graph/display-objects/display-object.js",
        "/Users/bge/qlik/git/picasso.js/src/core/scene-graph/display-objects/index.js",
        "/Users/bge/qlik/git/picasso.js/src/core/scene-graph/display-objects/line.js",
        "/Users/bge/qlik/git/picasso.js/src/core/scene-graph/display-objects/rect.js",
        "/Users/bge/qlik/git/picasso.js/src/core/scene-graph/display-objects/stage.js",
        "/Users/bge/qlik/git/picasso.js/src/core/scene-graph/display-objects/text.js",
        "/Users/bge/qlik/git/picasso.js/src/core/scene-graph/node-container.js",
        "/Users/bge/qlik/git/picasso.js/src/core/scene-graph/node.js",
        "/Users/bge/qlik/git/picasso.js/src/core/scene-graph/scene.js",
        "/Users/bge/qlik/git/picasso.js/src/core/scene-graph/transform-resolver.js",
        "/Users/bge/qlik/git/picasso.js/src/core/style/index.js",
        "/Users/bge/qlik/git/picasso.js/src/core/transposer/transposer.js",
        "/Users/bge/qlik/git/picasso.js/src/core/utils/event-emitter.js",
        "/Users/bge/qlik/git/picasso.js/src/core/utils/registry.js",
        "/Users/bge/qlik/git/picasso.js/src/index.js",
        "/Users/bge/qlik/git/picasso.js/src/q/data/meta-to-data.js",
        "/Users/bge/qlik/git/picasso.js/src/q/data/q-field.js",
        "/Users/bge/qlik/git/picasso.js/src/q/data/q-table.js",
        "/Users/bge/qlik/git/picasso.js/src/q/formatter/index.js",
        "/Users/bge/qlik/git/picasso.js/src/q/formatter/numberFormat.js",
        "/Users/bge/qlik/git/picasso.js/src/q/formatter/parts/qs-date-formatter.js",
        "/Users/bge/qlik/git/picasso.js/src/q/formatter/parts/qs-number-formatter.js",
        "/Users/bge/qlik/git/picasso.js/src/q/formatter/timeFormat.js",
        "/Users/bge/qlik/git/picasso.js/src/q/index.js",
        "/Users/bge/qlik/git/picasso.js/src/web/index.js",
        "/Users/bge/qlik/git/picasso.js/src/web/renderer/canvas-renderer/canvas-renderer.js",
        "/Users/bge/qlik/git/picasso.js/src/web/renderer/canvas-renderer/index.js",
        "/Users/bge/qlik/git/picasso.js/src/web/renderer/canvas-renderer/shapes/circle.js",
        "/Users/bge/qlik/git/picasso.js/src/web/renderer/canvas-renderer/shapes/line.js",
        "/Users/bge/qlik/git/picasso.js/src/web/renderer/canvas-renderer/shapes/rect.js",
        "/Users/bge/qlik/git/picasso.js/src/web/renderer/canvas-renderer/shapes/text.js",
        "/Users/bge/qlik/git/picasso.js/src/web/renderer/node-tree.js",
        "/Users/bge/qlik/git/picasso.js/src/web/renderer/svg-renderer/svg-nodes.js",
        "/Users/bge/qlik/git/picasso.js/src/web/renderer/svg-renderer/svg-renderer.js",
        "/Users/bge/qlik/git/picasso.js/src/web/renderer/svg-renderer/svg-tree.js",
        "/Users/bge/qlik/git/picasso.js/src/web/renderer/text-manipulation.js",
        "/Users/bge/qlik/git/picasso.js/src/web/renderer/text-metrics.js"
      ],
      "___id": "T000002R003354",
      "___s": true
    }
  ]
}